// def local_scan(bucket: bit<32>[128][16]) {
//   let bucket_tmp1: bit<32> = 0;
//   let bucket_tmp2: bit<32> = 0;
//   for (let radix_id = 0..128) {
//     for (let i = 1..16) {
//       bucket_tmp1 := bucket[radix_id][i - 1];
//       ---
//       bucket_tmp2 := bucket[radix_id][i];
//       ---
//       bucket[radix_id][i] := bucket_tmp1 + bucket_tmp2;
//     }
//   }
// }

// def sum_scan(sum: bit<32>[128], bucket: bit<32>[128][16]) {
//   let sum_tmp: bit<32> = 0;
//   sum[0] := 0;
//   ---
//   for (let radix_id = 0..127) {
//     sum_tmp := sum[radix_id];
//     ---
//     sum[radix_id + 1] := sum_tmp + bucket[radix_id][15];
//   }
// }

// def last_step_scan(bucket: bit<32>[128][16], sum: bit<32>[128]) {
//   let bucket_tmp: bit<32> = 0;
//   for (let radix_id = 0..128) {
//     for (let i = 0..16) {
//       bucket_tmp := bucket[radix_id][i];
//       ---
//       bucket[radix_id][i] := bucket_tmp + sum[radix_id];
//     }
//   }
// }

// def init(bucket: bit<32>[128][16]) {
//   for (let i = 0..128) {
//     for (let j = 0..16) {
//       bucket[i][j] := 0;
//     }
//   }
// }

// def hist(bucket: bit<32>[128][16], a: bit<32>[512][4], exp: bit<32>) {
//   let bucket_idx: bit<32> = 0;
//   let bucket_tmp: bit<32> = 0;
//   for (let block_id = 0..512) {
//     for (let i = 0..4) {
//       bucket_idx := ((a[block_id][i] >> exp) & 0x3) * 512 + block_id + 1;
//       bucket_tmp := bucket[bucket_idx / 16][bucket_idx % 16];
//       ---
//       bucket[bucket_idx / 16][bucket_idx % 16] := bucket_tmp + 1;
//     }
//   }
// }

// def update(b: bit<32>[512][4], bucket: bit<32>[128][16], a: bit<32>[512][4], exp: bit<32>) {

//   let bucket_idx: bit<32> = 0;
//   let elem_per_block: bit<32> = 4;
//   let a_idx: bit<32> = 0;

//   let bucket_tmp: bit<32> = 0;

//   for (let block_id = 0..512) {
//     for (let i = 0..4) {
//       bucket_idx := ((a[block_id][i] >> exp) & 0x3) * 512 + block_id;
//       bucket_tmp := bucket[bucket_idx / 16][bucket_idx % 16];
//       ---
//       b[bucket_tmp / 4][bucket_tmp % 4] := a[block_id][i];
//       bucket[bucket_idx / 16][bucket_idx % 16] := bucket_tmp + 1;
//     }
//   }
// }

decl a: bit<32>[512][4];
decl b: bit<32>[512][4];
decl bucket: bit<32>[128][16];
decl sum: bit<32>[128];

let valid_buffer = 0;
let buffer_a = 0;
let buffer_b = 1;
let temp_valid_buffer = 0;

for (let exp = 0..16) {
  // inline
  // init(bucket);
  for (let i = 0..128) {
    for (let j = 0..16) {
      bucket[i][j] := 0;
    }
  }
  // inline

  ---
  if (valid_buffer == buffer_a) {
    // inline
    // hist(bucket, a, exp << 1);
    let bucket_idx: bit<32> = 0;
    let bucket_tmp: bit<32> = 0;
    for (let block_id = 0..512) {
      for (let i = 0..4) {
        bucket_idx := ((a[block_id][i] >> (exp << 1)) & 0x3) * 512 + block_id + 1;
        bucket_tmp := bucket[bucket_idx / 16][bucket_idx % 16];
        ---
        bucket[bucket_idx / 16][bucket_idx % 16] := bucket_tmp + 1;
      }
    }
    // inline
  } else {
    // inline
    // hist(bucket, b, exp << 1);
    let bucket_idx: bit<32> = 0;
    let bucket_tmp: bit<32> = 0;
    for (let block_id = 0..512) {
      for (let i = 0..4) {
        bucket_idx := ((b[block_id][i] >> (exp << 1)) & 0x3) * 512 + block_id + 1;
        bucket_tmp := bucket[bucket_idx / 16][bucket_idx % 16];
        ---
        bucket[bucket_idx / 16][bucket_idx % 16] := bucket_tmp + 1;
      }
    }
    // inline
  }

  ---
  // inline
  // local_scan(bucket);
  let bucket_tmp1: bit<32> = 0;
  let bucket_tmp2: bit<32> = 0;
  for (let radix_id = 0..128) {
    for (let i = 1..16) {
      bucket_tmp1 := bucket[radix_id][i - 1];
      ---
      bucket_tmp2 := bucket[radix_id][i];
      ---
      bucket[radix_id][i] := bucket_tmp1 + bucket_tmp2;
    }
  }
  // inline
  ---
  // inline
  // sum_scan(sum, bucket);
  let sum_tmp: bit<32> = 0;
  sum[0] := 0;
  ---
  for (let radix_id = 0..127) {
    sum_tmp := sum[radix_id];
    ---
    sum[radix_id + 1] := sum_tmp + bucket[radix_id][15];
  }
  // inline
  ---
  // inline
  // last_step_scan(bucket, sum);
  let bucket_tmp: bit<32> = 0;
  for (let radix_id = 0..128) {
    for (let i = 0..16) {
      bucket_tmp := bucket[radix_id][i];
      ---
      bucket[radix_id][i] := bucket_tmp + sum[radix_id];
    }
  }
  // inline

  ---
  if (valid_buffer == buffer_a) {
    // inline
    // update(b, bucket, a, exp << 1);
    let bucket_idx: bit<32> = 0;
    let elem_per_block: bit<32> = 4;
    let a_idx: bit<32> = 0;

    let bucket_tmp_10: bit<32> = 0;

    for (let block_id = 0..512) {
      for (let i = 0..4) {
        bucket_idx := ((a[block_id][i] >> (exp << 1)) & 0x3) * 512 + block_id;
        bucket_tmp_10 := bucket[bucket_idx / 16][bucket_idx % 16];
        ---
        b[bucket_tmp_10 / 4][bucket_tmp_10 % 4] := a[block_id][i];
        bucket[bucket_idx / 16][bucket_idx % 16] := bucket_tmp_10 + 1;
      }
    }
    // inline
    temp_valid_buffer := buffer_b;
  } else {
    // inline
    // update(a, bucket, b, exp << 1);
    let bucket_idx: bit<32> = 0;
    let elem_per_block: bit<32> = 4;
    let a_idx: bit<32> = 0;

    let bucket_tmp_11: bit<32> = 0;

    for (let block_id = 0..512) {
      for (let i = 0..4) {
        bucket_idx := ((b[block_id][i] >> (exp << 1)) & 0x3) * 512 + block_id;
        bucket_tmp_11 := bucket[bucket_idx / 16][bucket_idx % 16];
        ---
        a[bucket_tmp_11 / 4][bucket_tmp_11 % 4] := b[block_id][i];
        bucket[bucket_idx / 16][bucket_idx % 16] := bucket_tmp_11 + 1;
      }
    }
    // inline
    temp_valid_buffer := buffer_a;
  }

  ---
  valid_buffer := temp_valid_buffer;
}

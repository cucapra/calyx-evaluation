def merge (a: bit<32>[2048], start: bit<16>, m: bit<16>, stop: bit<16>) = {
   let temp: bit<32>[2048];
    //let temp: float[2048];
   {
   let i: bit<16> = start;
   let j: bit<16> = m+1;
   ---
   while (i<=m){
     decor "#pragma HLS loop_tripcount avg=5"
     temp[i] := a[i];
     i := i+1;
   }
   ---
   while (j<=stop){
    decor "#pragma HLS loop_tripcount avg=6"
    temp[m+1+stop-j] := a[j];
    j := j+1;
   }
   ---
   let k = start;
   i := start;
   j := stop;
   ---
   while (k <= stop) {
    decor "#pragma HLS loop_tripcount avg=11"
    let temp_j: bit<32>  = 0;
    let temp_i: bit<32>  = 0;
    {
    temp_j := temp[j];
    ---
    temp_i  := temp[i];
    ---
     if(temp_j < temp_i) {
       a[k] := temp_j;
       j := j-1;
     } else {
       a[k] := temp_i;
       i := i+1;
     }
     }
  k := k+1
  }
  }
}


// sorting

decl a: bit<32>[2048];
let start: bit<16> = 0;
let stop: bit<16> = 2048;
let m: bit<16> = 1;
let from: bit<16> = 0;
let mid: bit<16> = 0;
let to: bit<16> = 0;
---
while (m < stop - start) {
  decor "#pragma HLS loop_tripcount avg=2047"
  let i = start;
  while (i < stop) {
    decor "#pragma HLS loop_tripcount avg=186"
    from := i;
    mid := i+m-1;
    to := i+m+m-1
    ---
    if(to < stop){
     merge(a, from, mid, to);
    }
    else{
     merge(a, from, mid, stop);
    }
    i := i+m+m
   }
 m := m+m
}

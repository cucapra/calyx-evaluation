// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.769000,HLS_SYN_LAT=9,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=42,HLS_SYN_LUT=88,HLS_VERSION=2019_1}" *)

module kernel (
        ap_clk,
        ap_rst_n,
        A_V_Addr_A,
        A_V_EN_A,
        A_V_WEN_A,
        A_V_Din_A,
        A_V_Dout_A,
        A_V_Clk_A,
        A_V_Rst_A,
        A_V_Addr_B,
        A_V_EN_B,
        A_V_WEN_B,
        A_V_Din_B,
        A_V_Dout_B,
        A_V_Clk_B,
        A_V_Rst_B,
        B_V_Addr_A,
        B_V_EN_A,
        B_V_WEN_A,
        B_V_Din_A,
        B_V_Dout_A,
        B_V_Clk_A,
        B_V_Rst_A,
        B_V_Addr_B,
        B_V_EN_B,
        B_V_WEN_B,
        B_V_Din_B,
        B_V_Dout_B,
        B_V_Clk_B,
        B_V_Rst_B,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] A_V_Addr_A;
output   A_V_EN_A;
output  [3:0] A_V_WEN_A;
output  [31:0] A_V_Din_A;
input  [31:0] A_V_Dout_A;
output   A_V_Clk_A;
output   A_V_Rst_A;
output  [31:0] A_V_Addr_B;
output   A_V_EN_B;
output  [3:0] A_V_WEN_B;
output  [31:0] A_V_Din_B;
input  [31:0] A_V_Dout_B;
output   A_V_Clk_B;
output   A_V_Rst_B;
output  [31:0] B_V_Addr_A;
output   B_V_EN_A;
output  [3:0] B_V_WEN_A;
output  [31:0] B_V_Din_A;
input  [31:0] B_V_Dout_A;
output   B_V_Clk_A;
output   B_V_Rst_A;
output  [31:0] B_V_Addr_B;
output   B_V_EN_B;
output  [3:0] B_V_WEN_B;
output  [31:0] B_V_Din_B;
input  [31:0] B_V_Dout_B;
output   B_V_Clk_B;
output   B_V_Rst_B;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] i_fu_49_p2;
wire    ap_CS_fsm_state2;
reg   [3:0] i_0_reg_32;
wire   [0:0] icmp_ln10_fu_43_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
kernel_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_43_p2 == 1'd0))) begin
        i_0_reg_32 <= i_fu_49_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_32 <= 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_43_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_43_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_43_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_Addr_A = 32'd0;

assign A_V_Addr_B = 32'd0;

assign A_V_Clk_A = ap_clk;

assign A_V_Clk_B = ap_clk;

assign A_V_Din_A = 32'd0;

assign A_V_Din_B = 32'd0;

assign A_V_EN_A = 1'b0;

assign A_V_EN_B = 1'b0;

assign A_V_Rst_A = ap_rst_n_inv;

assign A_V_Rst_B = ap_rst_n_inv;

assign A_V_WEN_A = 4'd0;

assign A_V_WEN_B = 4'd0;

assign B_V_Addr_A = 32'd0;

assign B_V_Addr_B = 32'd0;

assign B_V_Clk_A = ap_clk;

assign B_V_Clk_B = ap_clk;

assign B_V_Din_A = 32'd0;

assign B_V_Din_B = 32'd0;

assign B_V_EN_A = 1'b0;

assign B_V_EN_B = 1'b0;

assign B_V_Rst_A = ap_rst_n_inv;

assign B_V_Rst_B = ap_rst_n_inv;

assign B_V_WEN_A = 4'd0;

assign B_V_WEN_B = 4'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_49_p2 = (i_0_reg_32 + 4'd1);

assign icmp_ln10_fu_43_p2 = ((i_0_reg_32 == 4'd8) ? 1'b1 : 1'b0);

endmodule //kernel

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel_HH_
#define _kernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "kernel_control_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 4,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32>
struct kernel : public sc_module {
    // Port declarations 48
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > A_V_Addr_A;
    sc_out< sc_logic > A_V_EN_A;
    sc_out< sc_lv<4> > A_V_WEN_A;
    sc_out< sc_lv<32> > A_V_Din_A;
    sc_in< sc_lv<32> > A_V_Dout_A;
    sc_out< sc_logic > A_V_Clk_A;
    sc_out< sc_logic > A_V_Rst_A;
    sc_out< sc_lv<32> > A_V_Addr_B;
    sc_out< sc_logic > A_V_EN_B;
    sc_out< sc_lv<4> > A_V_WEN_B;
    sc_out< sc_lv<32> > A_V_Din_B;
    sc_in< sc_lv<32> > A_V_Dout_B;
    sc_out< sc_logic > A_V_Clk_B;
    sc_out< sc_logic > A_V_Rst_B;
    sc_out< sc_lv<32> > B_V_Addr_A;
    sc_out< sc_logic > B_V_EN_A;
    sc_out< sc_lv<4> > B_V_WEN_A;
    sc_out< sc_lv<32> > B_V_Din_A;
    sc_in< sc_lv<32> > B_V_Dout_A;
    sc_out< sc_logic > B_V_Clk_A;
    sc_out< sc_logic > B_V_Rst_A;
    sc_out< sc_lv<32> > B_V_Addr_B;
    sc_out< sc_logic > B_V_EN_B;
    sc_out< sc_lv<4> > B_V_WEN_B;
    sc_out< sc_lv<32> > B_V_Din_B;
    sc_in< sc_lv<32> > B_V_Dout_B;
    sc_out< sc_logic > B_V_Clk_B;
    sc_out< sc_logic > B_V_Rst_B;
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    kernel(sc_module_name name);
    SC_HAS_PROCESS(kernel);

    ~kernel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    kernel_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* kernel_control_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<4> > i_fu_49_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > i_0_reg_32;
    sc_signal< sc_lv<1> > icmp_ln10_fu_43_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_V_Addr_A();
    void thread_A_V_Addr_B();
    void thread_A_V_Clk_A();
    void thread_A_V_Clk_B();
    void thread_A_V_Din_A();
    void thread_A_V_Din_B();
    void thread_A_V_EN_A();
    void thread_A_V_EN_B();
    void thread_A_V_Rst_A();
    void thread_A_V_Rst_B();
    void thread_A_V_WEN_A();
    void thread_A_V_WEN_B();
    void thread_B_V_Addr_A();
    void thread_B_V_Addr_B();
    void thread_B_V_Clk_A();
    void thread_B_V_Clk_B();
    void thread_B_V_Din_A();
    void thread_B_V_Din_B();
    void thread_B_V_EN_A();
    void thread_B_V_EN_B();
    void thread_B_V_Rst_A();
    void thread_B_V_Rst_B();
    void thread_B_V_WEN_A();
    void thread_B_V_WEN_B();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_i_fu_49_p2();
    void thread_icmp_ln10_fu_43_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif

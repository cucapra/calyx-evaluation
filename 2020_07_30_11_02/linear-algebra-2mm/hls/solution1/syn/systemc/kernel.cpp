// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "kernel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic kernel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic kernel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<25> kernel::ap_ST_fsm_state1 = "1";
const sc_lv<25> kernel::ap_ST_fsm_state2 = "10";
const sc_lv<25> kernel::ap_ST_fsm_state3 = "100";
const sc_lv<25> kernel::ap_ST_fsm_state4 = "1000";
const sc_lv<25> kernel::ap_ST_fsm_state5 = "10000";
const sc_lv<25> kernel::ap_ST_fsm_state6 = "100000";
const sc_lv<25> kernel::ap_ST_fsm_state7 = "1000000";
const sc_lv<25> kernel::ap_ST_fsm_state8 = "10000000";
const sc_lv<25> kernel::ap_ST_fsm_state9 = "100000000";
const sc_lv<25> kernel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<25> kernel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<25> kernel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<25> kernel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<25> kernel::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<32> kernel::ap_const_lv32_0 = "00000000000000000000000000000000";
const int kernel::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> kernel::ap_const_lv32_1 = "1";
const sc_lv<1> kernel::ap_const_lv1_0 = "0";
const sc_lv<32> kernel::ap_const_lv32_2 = "10";
const sc_lv<32> kernel::ap_const_lv32_3 = "11";
const sc_lv<32> kernel::ap_const_lv32_4 = "100";
const sc_lv<32> kernel::ap_const_lv32_7 = "111";
const sc_lv<32> kernel::ap_const_lv32_A = "1010";
const sc_lv<32> kernel::ap_const_lv32_B = "1011";
const sc_lv<32> kernel::ap_const_lv32_C = "1100";
const sc_lv<32> kernel::ap_const_lv32_D = "1101";
const sc_lv<32> kernel::ap_const_lv32_E = "1110";
const sc_lv<32> kernel::ap_const_lv32_11 = "10001";
const sc_lv<32> kernel::ap_const_lv32_13 = "10011";
const sc_lv<32> kernel::ap_const_lv32_14 = "10100";
const sc_lv<32> kernel::ap_const_lv32_17 = "10111";
const sc_lv<32> kernel::ap_const_lv32_18 = "11000";
const sc_lv<4> kernel::ap_const_lv4_0 = "0000";
const sc_lv<1> kernel::ap_const_lv1_1 = "1";
const sc_lv<32> kernel::ap_const_lv32_12 = "10010";
const sc_lv<64> kernel::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<4> kernel::ap_const_lv4_F = "1111";
const sc_lv<32> kernel::ap_const_lv32_6 = "110";
const sc_lv<4> kernel::ap_const_lv4_8 = "1000";
const sc_lv<4> kernel::ap_const_lv4_1 = "1";
const sc_lv<3> kernel::ap_const_lv3_0 = "000";
const sc_lv<32> kernel::ap_const_lv32_5 = "101";
const sc_lv<32> kernel::ap_const_lv32_8 = "1000";
const sc_lv<32> kernel::ap_const_lv32_F = "1111";
const sc_lv<32> kernel::ap_const_lv32_15 = "10101";
const bool kernel::ap_const_boolean_1 = true;

kernel::kernel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    kernel_control_s_axi_U = new kernel_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("kernel_control_s_axi_U");
    kernel_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    kernel_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    kernel_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    kernel_control_s_axi_U->WVALID(s_axi_control_WVALID);
    kernel_control_s_axi_U->WREADY(s_axi_control_WREADY);
    kernel_control_s_axi_U->WDATA(s_axi_control_WDATA);
    kernel_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    kernel_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    kernel_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    kernel_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    kernel_control_s_axi_U->RVALID(s_axi_control_RVALID);
    kernel_control_s_axi_U->RREADY(s_axi_control_RREADY);
    kernel_control_s_axi_U->RDATA(s_axi_control_RDATA);
    kernel_control_s_axi_U->RRESP(s_axi_control_RRESP);
    kernel_control_s_axi_U->BVALID(s_axi_control_BVALID);
    kernel_control_s_axi_U->BREADY(s_axi_control_BREADY);
    kernel_control_s_axi_U->BRESP(s_axi_control_BRESP);
    kernel_control_s_axi_U->ACLK(ap_clk);
    kernel_control_s_axi_U->ARESET(ap_rst_n_inv);
    kernel_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    kernel_control_s_axi_U->ap_start(ap_start);
    kernel_control_s_axi_U->interrupt(interrupt);
    kernel_control_s_axi_U->ap_ready(ap_ready);
    kernel_control_s_axi_U->ap_done(ap_done);
    kernel_control_s_axi_U->ap_idle(ap_idle);
    kernel_mul_32s_32s_32_3_1_U1 = new kernel_mul_32s_32s_32_3_1<1,3,32,32,32>("kernel_mul_32s_32s_32_3_1_U1");
    kernel_mul_32s_32s_32_3_1_U1->clk(ap_clk);
    kernel_mul_32s_32s_32_3_1_U1->reset(ap_rst_n_inv);
    kernel_mul_32s_32s_32_3_1_U1->din0(A_V_load_reg_530);
    kernel_mul_32s_32s_32_3_1_U1->din1(B_V_load_reg_535);
    kernel_mul_32s_32s_32_3_1_U1->ce(ap_var_for_const0);
    kernel_mul_32s_32s_32_3_1_U1->dout(grp_fu_346_p2);
    kernel_mul_32s_32s_32_3_1_U2 = new kernel_mul_32s_32s_32_3_1<1,3,32,32,32>("kernel_mul_32s_32s_32_3_1_U2");
    kernel_mul_32s_32s_32_3_1_U2->clk(ap_clk);
    kernel_mul_32s_32s_32_3_1_U2->reset(ap_rst_n_inv);
    kernel_mul_32s_32s_32_3_1_U2->din0(mul_ln209_1_reg_545);
    kernel_mul_32s_32s_32_3_1_U2->din1(alpha_V_load_reg_540);
    kernel_mul_32s_32s_32_3_1_U2->ce(ap_var_for_const0);
    kernel_mul_32s_32s_32_3_1_U2->dout(grp_fu_350_p2);
    kernel_mul_32s_32s_32_3_1_U3 = new kernel_mul_32s_32s_32_3_1<1,3,32,32,32>("kernel_mul_32s_32s_32_3_1_U3");
    kernel_mul_32s_32s_32_3_1_U3->clk(ap_clk);
    kernel_mul_32s_32s_32_3_1_U3->reset(ap_rst_n_inv);
    kernel_mul_32s_32s_32_3_1_U3->din0(beta_V_load_reg_597);
    kernel_mul_32s_32s_32_3_1_U3->din1(d_tmp_V_reg_592);
    kernel_mul_32s_32s_32_3_1_U3->ce(ap_var_for_const0);
    kernel_mul_32s_32s_32_3_1_U3->dout(grp_fu_409_p2);
    kernel_mul_32s_32s_32_3_1_U4 = new kernel_mul_32s_32s_32_3_1<1,3,32,32,32>("kernel_mul_32s_32s_32_3_1_U4");
    kernel_mul_32s_32s_32_3_1_U4->clk(ap_clk);
    kernel_mul_32s_32s_32_3_1_U4->reset(ap_rst_n_inv);
    kernel_mul_32s_32s_32_3_1_U4->din0(tmp_V_load_1_reg_625);
    kernel_mul_32s_32s_32_3_1_U4->din1(C_V_load_reg_630);
    kernel_mul_32s_32s_32_3_1_U4->ce(ap_var_for_const0);
    kernel_mul_32s_32s_32_3_1_U4->dout(grp_fu_461_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_V_Addr_A);
    sensitive << ( A_V_Addr_A_orig );

    SC_METHOD(thread_A_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln215_1_fu_319_p1 );

    SC_METHOD(thread_A_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_A_V_Din_A);

    SC_METHOD(thread_A_V_EN_A);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_A_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_A_V_WEN_A);

    SC_METHOD(thread_B_V_Addr_A);
    sensitive << ( B_V_Addr_A_orig );

    SC_METHOD(thread_B_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln215_3_fu_341_p1 );

    SC_METHOD(thread_B_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_B_V_Din_A);

    SC_METHOD(thread_B_V_EN_A);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_B_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_B_V_WEN_A);

    SC_METHOD(thread_C_V_Addr_A);
    sensitive << ( C_V_Addr_A_orig );

    SC_METHOD(thread_C_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( zext_ln215_7_fu_456_p1 );

    SC_METHOD(thread_C_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_C_V_Din_A);

    SC_METHOD(thread_C_V_EN_A);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_C_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_C_V_WEN_A);

    SC_METHOD(thread_D_V_Addr_A);
    sensitive << ( D_V_Addr_A_orig );

    SC_METHOD(thread_D_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( D_V_addr_reg_587 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( zext_ln37_1_fu_404_p1 );

    SC_METHOD(thread_D_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_D_V_Din_A);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( D_V_load_reg_226 );

    SC_METHOD(thread_D_V_EN_A);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_D_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_D_V_WEN_A);
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_add_ln215_1_fu_336_p2);
    sensitive << ( zext_ln321_reg_502 );
    sensitive << ( zext_ln215_2_fu_332_p1 );

    SC_METHOD(thread_add_ln215_2_fu_429_p2);
    sensitive << ( zext_ln34_reg_568 );
    sensitive << ( zext_ln215_4_fu_425_p1 );

    SC_METHOD(thread_add_ln215_3_fu_451_p2);
    sensitive << ( zext_ln37_reg_582 );
    sensitive << ( zext_ln215_6_fu_447_p1 );

    SC_METHOD(thread_add_ln215_fu_314_p2);
    sensitive << ( zext_ln16_reg_488 );
    sensitive << ( zext_ln215_fu_310_p1 );

    SC_METHOD(thread_add_ln321_fu_288_p2);
    sensitive << ( zext_ln16_reg_488 );
    sensitive << ( zext_ln321_fu_284_p1 );

    SC_METHOD(thread_add_ln37_fu_399_p2);
    sensitive << ( zext_ln34_reg_568 );
    sensitive << ( zext_ln37_fu_395_p1 );

    SC_METHOD(thread_add_ln700_1_fu_465_p2);
    sensitive << ( v1_V_reg_635 );
    sensitive << ( D_V_load_reg_226 );

    SC_METHOD(thread_add_ln700_fu_354_p2);
    sensitive << ( v_V_reg_550 );
    sensitive << ( tmp_V_load_reg_180 );

    SC_METHOD(thread_alpha_V_Addr_A);
    sensitive << ( alpha_V_Addr_A_orig );

    SC_METHOD(thread_alpha_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_alpha_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_alpha_V_Din_A);

    SC_METHOD(thread_alpha_V_EN_A);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_alpha_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_alpha_V_WEN_A);

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln31_fu_359_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln31_fu_359_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_beta_V_Addr_A);
    sensitive << ( beta_V_Addr_A_orig );

    SC_METHOD(thread_beta_V_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_beta_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_beta_V_Din_A);

    SC_METHOD(thread_beta_V_EN_A);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_beta_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_beta_V_WEN_A);

    SC_METHOD(thread_i1_fu_365_p2);
    sensitive << ( i1_0_reg_204 );

    SC_METHOD(thread_i_fu_254_p2);
    sensitive << ( i_0_reg_158 );

    SC_METHOD(thread_icmp_ln13_fu_248_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_158 );

    SC_METHOD(thread_icmp_ln16_fu_272_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_169 );

    SC_METHOD(thread_icmp_ln21_fu_298_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_193 );

    SC_METHOD(thread_icmp_ln31_fu_359_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( i1_0_reg_204 );

    SC_METHOD(thread_icmp_ln34_fu_383_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( j1_0_reg_215 );

    SC_METHOD(thread_icmp_ln41_fu_413_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( k1_0_reg_237 );

    SC_METHOD(thread_j1_fu_389_p2);
    sensitive << ( j1_0_reg_215 );

    SC_METHOD(thread_j_fu_278_p2);
    sensitive << ( j_0_reg_169 );

    SC_METHOD(thread_k1_fu_419_p2);
    sensitive << ( k1_0_reg_237 );

    SC_METHOD(thread_k_fu_304_p2);
    sensitive << ( k_0_reg_193 );

    SC_METHOD(thread_tmp_4_fu_260_p3);
    sensitive << ( i_0_reg_158 );

    SC_METHOD(thread_tmp_5_fu_371_p3);
    sensitive << ( i1_0_reg_204 );

    SC_METHOD(thread_tmp_6_fu_324_p3);
    sensitive << ( k_0_reg_193 );

    SC_METHOD(thread_tmp_7_fu_439_p3);
    sensitive << ( k1_0_reg_237 );

    SC_METHOD(thread_tmp_V_Addr_A);
    sensitive << ( tmp_V_Addr_A_orig );

    SC_METHOD(thread_tmp_V_Addr_A_orig);
    sensitive << ( tmp_V_addr_reg_507 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( zext_ln215_5_fu_434_p1 );

    SC_METHOD(thread_tmp_V_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_tmp_V_Din_A);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_V_load_reg_180 );

    SC_METHOD(thread_tmp_V_EN_A);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_tmp_V_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_tmp_V_WEN_A);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_zext_ln16_fu_268_p1);
    sensitive << ( tmp_4_fu_260_p3 );

    SC_METHOD(thread_zext_ln215_1_fu_319_p1);
    sensitive << ( add_ln215_fu_314_p2 );

    SC_METHOD(thread_zext_ln215_2_fu_332_p1);
    sensitive << ( tmp_6_fu_324_p3 );

    SC_METHOD(thread_zext_ln215_3_fu_341_p1);
    sensitive << ( add_ln215_1_fu_336_p2 );

    SC_METHOD(thread_zext_ln215_4_fu_425_p1);
    sensitive << ( k1_0_reg_237 );

    SC_METHOD(thread_zext_ln215_5_fu_434_p1);
    sensitive << ( add_ln215_2_fu_429_p2 );

    SC_METHOD(thread_zext_ln215_6_fu_447_p1);
    sensitive << ( tmp_7_fu_439_p3 );

    SC_METHOD(thread_zext_ln215_7_fu_456_p1);
    sensitive << ( add_ln215_3_fu_451_p2 );

    SC_METHOD(thread_zext_ln215_fu_310_p1);
    sensitive << ( k_0_reg_193 );

    SC_METHOD(thread_zext_ln321_1_fu_293_p1);
    sensitive << ( add_ln321_fu_288_p2 );

    SC_METHOD(thread_zext_ln321_fu_284_p1);
    sensitive << ( j_0_reg_169 );

    SC_METHOD(thread_zext_ln34_fu_379_p1);
    sensitive << ( tmp_5_fu_371_p3 );

    SC_METHOD(thread_zext_ln37_1_fu_404_p1);
    sensitive << ( add_ln37_fu_399_p2 );

    SC_METHOD(thread_zext_ln37_fu_395_p1);
    sensitive << ( j1_0_reg_215 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln13_fu_248_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln16_fu_272_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln21_fu_298_p2 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( icmp_ln31_fu_359_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( icmp_ln34_fu_383_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( icmp_ln41_fu_413_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "kernel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, alpha_V_Addr_A, "(port)alpha_V_Addr_A");
    sc_trace(mVcdFile, alpha_V_EN_A, "(port)alpha_V_EN_A");
    sc_trace(mVcdFile, alpha_V_WEN_A, "(port)alpha_V_WEN_A");
    sc_trace(mVcdFile, alpha_V_Din_A, "(port)alpha_V_Din_A");
    sc_trace(mVcdFile, alpha_V_Dout_A, "(port)alpha_V_Dout_A");
    sc_trace(mVcdFile, alpha_V_Clk_A, "(port)alpha_V_Clk_A");
    sc_trace(mVcdFile, alpha_V_Rst_A, "(port)alpha_V_Rst_A");
    sc_trace(mVcdFile, beta_V_Addr_A, "(port)beta_V_Addr_A");
    sc_trace(mVcdFile, beta_V_EN_A, "(port)beta_V_EN_A");
    sc_trace(mVcdFile, beta_V_WEN_A, "(port)beta_V_WEN_A");
    sc_trace(mVcdFile, beta_V_Din_A, "(port)beta_V_Din_A");
    sc_trace(mVcdFile, beta_V_Dout_A, "(port)beta_V_Dout_A");
    sc_trace(mVcdFile, beta_V_Clk_A, "(port)beta_V_Clk_A");
    sc_trace(mVcdFile, beta_V_Rst_A, "(port)beta_V_Rst_A");
    sc_trace(mVcdFile, tmp_V_Addr_A, "(port)tmp_V_Addr_A");
    sc_trace(mVcdFile, tmp_V_EN_A, "(port)tmp_V_EN_A");
    sc_trace(mVcdFile, tmp_V_WEN_A, "(port)tmp_V_WEN_A");
    sc_trace(mVcdFile, tmp_V_Din_A, "(port)tmp_V_Din_A");
    sc_trace(mVcdFile, tmp_V_Dout_A, "(port)tmp_V_Dout_A");
    sc_trace(mVcdFile, tmp_V_Clk_A, "(port)tmp_V_Clk_A");
    sc_trace(mVcdFile, tmp_V_Rst_A, "(port)tmp_V_Rst_A");
    sc_trace(mVcdFile, A_V_Addr_A, "(port)A_V_Addr_A");
    sc_trace(mVcdFile, A_V_EN_A, "(port)A_V_EN_A");
    sc_trace(mVcdFile, A_V_WEN_A, "(port)A_V_WEN_A");
    sc_trace(mVcdFile, A_V_Din_A, "(port)A_V_Din_A");
    sc_trace(mVcdFile, A_V_Dout_A, "(port)A_V_Dout_A");
    sc_trace(mVcdFile, A_V_Clk_A, "(port)A_V_Clk_A");
    sc_trace(mVcdFile, A_V_Rst_A, "(port)A_V_Rst_A");
    sc_trace(mVcdFile, B_V_Addr_A, "(port)B_V_Addr_A");
    sc_trace(mVcdFile, B_V_EN_A, "(port)B_V_EN_A");
    sc_trace(mVcdFile, B_V_WEN_A, "(port)B_V_WEN_A");
    sc_trace(mVcdFile, B_V_Din_A, "(port)B_V_Din_A");
    sc_trace(mVcdFile, B_V_Dout_A, "(port)B_V_Dout_A");
    sc_trace(mVcdFile, B_V_Clk_A, "(port)B_V_Clk_A");
    sc_trace(mVcdFile, B_V_Rst_A, "(port)B_V_Rst_A");
    sc_trace(mVcdFile, C_V_Addr_A, "(port)C_V_Addr_A");
    sc_trace(mVcdFile, C_V_EN_A, "(port)C_V_EN_A");
    sc_trace(mVcdFile, C_V_WEN_A, "(port)C_V_WEN_A");
    sc_trace(mVcdFile, C_V_Din_A, "(port)C_V_Din_A");
    sc_trace(mVcdFile, C_V_Dout_A, "(port)C_V_Dout_A");
    sc_trace(mVcdFile, C_V_Clk_A, "(port)C_V_Clk_A");
    sc_trace(mVcdFile, C_V_Rst_A, "(port)C_V_Rst_A");
    sc_trace(mVcdFile, D_V_Addr_A, "(port)D_V_Addr_A");
    sc_trace(mVcdFile, D_V_EN_A, "(port)D_V_EN_A");
    sc_trace(mVcdFile, D_V_WEN_A, "(port)D_V_WEN_A");
    sc_trace(mVcdFile, D_V_Din_A, "(port)D_V_Din_A");
    sc_trace(mVcdFile, D_V_Dout_A, "(port)D_V_Dout_A");
    sc_trace(mVcdFile, D_V_Clk_A, "(port)D_V_Clk_A");
    sc_trace(mVcdFile, D_V_Rst_A, "(port)D_V_Rst_A");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, i_fu_254_p2, "i_fu_254_p2");
    sc_trace(mVcdFile, i_reg_483, "i_reg_483");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln16_fu_268_p1, "zext_ln16_fu_268_p1");
    sc_trace(mVcdFile, zext_ln16_reg_488, "zext_ln16_reg_488");
    sc_trace(mVcdFile, icmp_ln13_fu_248_p2, "icmp_ln13_fu_248_p2");
    sc_trace(mVcdFile, j_fu_278_p2, "j_fu_278_p2");
    sc_trace(mVcdFile, j_reg_497, "j_reg_497");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln321_fu_284_p1, "zext_ln321_fu_284_p1");
    sc_trace(mVcdFile, zext_ln321_reg_502, "zext_ln321_reg_502");
    sc_trace(mVcdFile, icmp_ln16_fu_272_p2, "icmp_ln16_fu_272_p2");
    sc_trace(mVcdFile, tmp_V_addr_reg_507, "tmp_V_addr_reg_507");
    sc_trace(mVcdFile, k_fu_304_p2, "k_fu_304_p2");
    sc_trace(mVcdFile, k_reg_515, "k_reg_515");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln21_fu_298_p2, "icmp_ln21_fu_298_p2");
    sc_trace(mVcdFile, A_V_load_reg_530, "A_V_load_reg_530");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, B_V_load_reg_535, "B_V_load_reg_535");
    sc_trace(mVcdFile, alpha_V_load_reg_540, "alpha_V_load_reg_540");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_346_p2, "grp_fu_346_p2");
    sc_trace(mVcdFile, mul_ln209_1_reg_545, "mul_ln209_1_reg_545");
    sc_trace(mVcdFile, grp_fu_350_p2, "grp_fu_350_p2");
    sc_trace(mVcdFile, v_V_reg_550, "v_V_reg_550");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, add_ln700_fu_354_p2, "add_ln700_fu_354_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i1_fu_365_p2, "i1_fu_365_p2");
    sc_trace(mVcdFile, i1_reg_563, "i1_reg_563");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, zext_ln34_fu_379_p1, "zext_ln34_fu_379_p1");
    sc_trace(mVcdFile, zext_ln34_reg_568, "zext_ln34_reg_568");
    sc_trace(mVcdFile, icmp_ln31_fu_359_p2, "icmp_ln31_fu_359_p2");
    sc_trace(mVcdFile, j1_fu_389_p2, "j1_fu_389_p2");
    sc_trace(mVcdFile, j1_reg_577, "j1_reg_577");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, zext_ln37_fu_395_p1, "zext_ln37_fu_395_p1");
    sc_trace(mVcdFile, zext_ln37_reg_582, "zext_ln37_reg_582");
    sc_trace(mVcdFile, icmp_ln34_fu_383_p2, "icmp_ln34_fu_383_p2");
    sc_trace(mVcdFile, D_V_addr_reg_587, "D_V_addr_reg_587");
    sc_trace(mVcdFile, d_tmp_V_reg_592, "d_tmp_V_reg_592");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, beta_V_load_reg_597, "beta_V_load_reg_597");
    sc_trace(mVcdFile, grp_fu_409_p2, "grp_fu_409_p2");
    sc_trace(mVcdFile, mul_ln209_reg_602, "mul_ln209_reg_602");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, k1_fu_419_p2, "k1_fu_419_p2");
    sc_trace(mVcdFile, k1_reg_610, "k1_reg_610");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, icmp_ln41_fu_413_p2, "icmp_ln41_fu_413_p2");
    sc_trace(mVcdFile, tmp_V_load_1_reg_625, "tmp_V_load_1_reg_625");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, C_V_load_reg_630, "C_V_load_reg_630");
    sc_trace(mVcdFile, grp_fu_461_p2, "grp_fu_461_p2");
    sc_trace(mVcdFile, v1_V_reg_635, "v1_V_reg_635");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, add_ln700_1_fu_465_p2, "add_ln700_1_fu_465_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, i_0_reg_158, "i_0_reg_158");
    sc_trace(mVcdFile, j_0_reg_169, "j_0_reg_169");
    sc_trace(mVcdFile, tmp_V_load_reg_180, "tmp_V_load_reg_180");
    sc_trace(mVcdFile, k_0_reg_193, "k_0_reg_193");
    sc_trace(mVcdFile, i1_0_reg_204, "i1_0_reg_204");
    sc_trace(mVcdFile, j1_0_reg_215, "j1_0_reg_215");
    sc_trace(mVcdFile, D_V_load_reg_226, "D_V_load_reg_226");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, k1_0_reg_237, "k1_0_reg_237");
    sc_trace(mVcdFile, zext_ln321_1_fu_293_p1, "zext_ln321_1_fu_293_p1");
    sc_trace(mVcdFile, zext_ln215_1_fu_319_p1, "zext_ln215_1_fu_319_p1");
    sc_trace(mVcdFile, zext_ln215_3_fu_341_p1, "zext_ln215_3_fu_341_p1");
    sc_trace(mVcdFile, zext_ln37_1_fu_404_p1, "zext_ln37_1_fu_404_p1");
    sc_trace(mVcdFile, zext_ln215_5_fu_434_p1, "zext_ln215_5_fu_434_p1");
    sc_trace(mVcdFile, zext_ln215_7_fu_456_p1, "zext_ln215_7_fu_456_p1");
    sc_trace(mVcdFile, tmp_V_Addr_A_orig, "tmp_V_Addr_A_orig");
    sc_trace(mVcdFile, A_V_Addr_A_orig, "A_V_Addr_A_orig");
    sc_trace(mVcdFile, B_V_Addr_A_orig, "B_V_Addr_A_orig");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, alpha_V_Addr_A_orig, "alpha_V_Addr_A_orig");
    sc_trace(mVcdFile, D_V_Addr_A_orig, "D_V_Addr_A_orig");
    sc_trace(mVcdFile, beta_V_Addr_A_orig, "beta_V_Addr_A_orig");
    sc_trace(mVcdFile, C_V_Addr_A_orig, "C_V_Addr_A_orig");
    sc_trace(mVcdFile, tmp_4_fu_260_p3, "tmp_4_fu_260_p3");
    sc_trace(mVcdFile, add_ln321_fu_288_p2, "add_ln321_fu_288_p2");
    sc_trace(mVcdFile, zext_ln215_fu_310_p1, "zext_ln215_fu_310_p1");
    sc_trace(mVcdFile, add_ln215_fu_314_p2, "add_ln215_fu_314_p2");
    sc_trace(mVcdFile, tmp_6_fu_324_p3, "tmp_6_fu_324_p3");
    sc_trace(mVcdFile, zext_ln215_2_fu_332_p1, "zext_ln215_2_fu_332_p1");
    sc_trace(mVcdFile, add_ln215_1_fu_336_p2, "add_ln215_1_fu_336_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_5_fu_371_p3, "tmp_5_fu_371_p3");
    sc_trace(mVcdFile, add_ln37_fu_399_p2, "add_ln37_fu_399_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, zext_ln215_4_fu_425_p1, "zext_ln215_4_fu_425_p1");
    sc_trace(mVcdFile, add_ln215_2_fu_429_p2, "add_ln215_2_fu_429_p2");
    sc_trace(mVcdFile, tmp_7_fu_439_p3, "tmp_7_fu_439_p3");
    sc_trace(mVcdFile, zext_ln215_6_fu_447_p1, "zext_ln215_6_fu_447_p1");
    sc_trace(mVcdFile, add_ln215_3_fu_451_p2, "add_ln215_3_fu_451_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("kernel.hdltvin.dat");
    mHdltvoutHandle.open("kernel.hdltvout.dat");
}

kernel::~kernel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete kernel_control_s_axi_U;
    delete kernel_mul_32s_32s_32_3_1_U1;
    delete kernel_mul_32s_32s_32_3_1_U2;
    delete kernel_mul_32s_32s_32_3_1_U3;
    delete kernel_mul_32s_32s_32_3_1_U4;
}

void kernel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void kernel::thread_ap_clk_no_reset_() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        D_V_load_reg_226 = add_ln700_1_fu_465_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        D_V_load_reg_226 = mul_ln209_reg_602.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln13_fu_248_p2.read(), ap_const_lv1_1))) {
        i1_0_reg_204 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                esl_seteq<1,1,1>(icmp_ln34_fu_383_p2.read(), ap_const_lv1_1))) {
        i1_0_reg_204 = i1_reg_563.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_272_p2.read(), ap_const_lv1_1))) {
        i_0_reg_158 = i_reg_483.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_158 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(icmp_ln41_fu_413_p2.read(), ap_const_lv1_1))) {
        j1_0_reg_215 = j1_reg_577.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln31_fu_359_p2.read()))) {
        j1_0_reg_215 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln21_fu_298_p2.read(), ap_const_lv1_1))) {
        j_0_reg_169 = j_reg_497.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln13_fu_248_p2.read(), ap_const_lv1_0))) {
        j_0_reg_169 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        k1_0_reg_237 = k1_reg_610.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        k1_0_reg_237 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        k_0_reg_193 = k_reg_515.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_272_p2.read()))) {
        k_0_reg_193 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        tmp_V_load_reg_180 = add_ln700_fu_354_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_272_p2.read()))) {
        tmp_V_load_reg_180 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        A_V_load_reg_530 = A_V_Dout_A.read();
        B_V_load_reg_535 = B_V_Dout_A.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        C_V_load_reg_630 = C_V_Dout_A.read();
        tmp_V_load_1_reg_625 = tmp_V_Dout_A.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln34_fu_383_p2.read()))) {
        D_V_addr_reg_587 =  (sc_lv<6>) (zext_ln37_1_fu_404_p1.read());
        zext_ln37_reg_582 = zext_ln37_fu_395_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        alpha_V_load_reg_540 = alpha_V_Dout_A.read();
        mul_ln209_1_reg_545 = grp_fu_346_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        beta_V_load_reg_597 = beta_V_Dout_A.read();
        d_tmp_V_reg_592 = D_V_Dout_A.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i1_reg_563 = i1_fu_365_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_483 = i_fu_254_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        j1_reg_577 = j1_fu_389_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_497 = j_fu_278_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        k1_reg_610 = k1_fu_419_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_515 = k_fu_304_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        mul_ln209_reg_602 = grp_fu_409_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_272_p2.read()))) {
        tmp_V_addr_reg_507 =  (sc_lv<6>) (zext_ln321_1_fu_293_p1.read());
        zext_ln321_reg_502 = zext_ln321_fu_284_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        v1_V_reg_635 = grp_fu_461_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        v_V_reg_550 = grp_fu_350_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln13_fu_248_p2.read(), ap_const_lv1_0))) {
        zext_ln16_reg_488 = zext_ln16_fu_268_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln31_fu_359_p2.read()))) {
        zext_ln34_reg_568 = zext_ln34_fu_379_p1.read();
    }
}

void kernel::thread_A_V_Addr_A() {
    A_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): A_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void kernel::thread_A_V_Addr_A_orig() {
    A_V_Addr_A_orig =  (sc_lv<32>) (zext_ln215_1_fu_319_p1.read());
}

void kernel::thread_A_V_Clk_A() {
    A_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void kernel::thread_A_V_Din_A() {
    A_V_Din_A = ap_const_lv32_0;
}

void kernel::thread_A_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_V_EN_A = ap_const_logic_1;
    } else {
        A_V_EN_A = ap_const_logic_0;
    }
}

void kernel::thread_A_V_Rst_A() {
    A_V_Rst_A = ap_rst_n_inv.read();
}

void kernel::thread_A_V_WEN_A() {
    A_V_WEN_A = ap_const_lv4_0;
}

void kernel::thread_B_V_Addr_A() {
    B_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): B_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void kernel::thread_B_V_Addr_A_orig() {
    B_V_Addr_A_orig =  (sc_lv<32>) (zext_ln215_3_fu_341_p1.read());
}

void kernel::thread_B_V_Clk_A() {
    B_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void kernel::thread_B_V_Din_A() {
    B_V_Din_A = ap_const_lv32_0;
}

void kernel::thread_B_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        B_V_EN_A = ap_const_logic_1;
    } else {
        B_V_EN_A = ap_const_logic_0;
    }
}

void kernel::thread_B_V_Rst_A() {
    B_V_Rst_A = ap_rst_n_inv.read();
}

void kernel::thread_B_V_WEN_A() {
    B_V_WEN_A = ap_const_lv4_0;
}

void kernel::thread_C_V_Addr_A() {
    C_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): C_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void kernel::thread_C_V_Addr_A_orig() {
    C_V_Addr_A_orig =  (sc_lv<32>) (zext_ln215_7_fu_456_p1.read());
}

void kernel::thread_C_V_Clk_A() {
    C_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void kernel::thread_C_V_Din_A() {
    C_V_Din_A = ap_const_lv32_0;
}

void kernel::thread_C_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        C_V_EN_A = ap_const_logic_1;
    } else {
        C_V_EN_A = ap_const_logic_0;
    }
}

void kernel::thread_C_V_Rst_A() {
    C_V_Rst_A = ap_rst_n_inv.read();
}

void kernel::thread_C_V_WEN_A() {
    C_V_WEN_A = ap_const_lv4_0;
}

void kernel::thread_D_V_Addr_A() {
    D_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): D_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void kernel::thread_D_V_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        D_V_Addr_A_orig =  (sc_lv<32>) (D_V_addr_reg_587.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        D_V_Addr_A_orig =  (sc_lv<32>) (zext_ln37_1_fu_404_p1.read());
    } else {
        D_V_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel::thread_D_V_Clk_A() {
    D_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void kernel::thread_D_V_Din_A() {
    D_V_Din_A = D_V_load_reg_226.read();
}

void kernel::thread_D_V_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        D_V_EN_A = ap_const_logic_1;
    } else {
        D_V_EN_A = ap_const_logic_0;
    }
}

void kernel::thread_D_V_Rst_A() {
    D_V_Rst_A = ap_rst_n_inv.read();
}

void kernel::thread_D_V_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        D_V_WEN_A = ap_const_lv4_F;
    } else {
        D_V_WEN_A = ap_const_lv4_0;
    }
}

void kernel::thread_add_ln215_1_fu_336_p2() {
    add_ln215_1_fu_336_p2 = (!zext_ln321_reg_502.read().is_01() || !zext_ln215_2_fu_332_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln321_reg_502.read()) + sc_biguint<8>(zext_ln215_2_fu_332_p1.read()));
}

void kernel::thread_add_ln215_2_fu_429_p2() {
    add_ln215_2_fu_429_p2 = (!zext_ln215_4_fu_425_p1.read().is_01() || !zext_ln34_reg_568.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln215_4_fu_425_p1.read()) + sc_biguint<8>(zext_ln34_reg_568.read()));
}

void kernel::thread_add_ln215_3_fu_451_p2() {
    add_ln215_3_fu_451_p2 = (!zext_ln37_reg_582.read().is_01() || !zext_ln215_6_fu_447_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln37_reg_582.read()) + sc_biguint<8>(zext_ln215_6_fu_447_p1.read()));
}

void kernel::thread_add_ln215_fu_314_p2() {
    add_ln215_fu_314_p2 = (!zext_ln215_fu_310_p1.read().is_01() || !zext_ln16_reg_488.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln215_fu_310_p1.read()) + sc_biguint<8>(zext_ln16_reg_488.read()));
}

void kernel::thread_add_ln321_fu_288_p2() {
    add_ln321_fu_288_p2 = (!zext_ln16_reg_488.read().is_01() || !zext_ln321_fu_284_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln16_reg_488.read()) + sc_biguint<8>(zext_ln321_fu_284_p1.read()));
}

void kernel::thread_add_ln37_fu_399_p2() {
    add_ln37_fu_399_p2 = (!zext_ln34_reg_568.read().is_01() || !zext_ln37_fu_395_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(zext_ln34_reg_568.read()) + sc_biguint<8>(zext_ln37_fu_395_p1.read()));
}

void kernel::thread_add_ln700_1_fu_465_p2() {
    add_ln700_1_fu_465_p2 = (!D_V_load_reg_226.read().is_01() || !v1_V_reg_635.read().is_01())? sc_lv<32>(): (sc_biguint<32>(D_V_load_reg_226.read()) + sc_biguint<32>(v1_V_reg_635.read()));
}

void kernel::thread_add_ln700_fu_354_p2() {
    add_ln700_fu_354_p2 = (!tmp_V_load_reg_180.read().is_01() || !v_V_reg_550.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_V_load_reg_180.read()) + sc_biguint<32>(v_V_reg_550.read()));
}

void kernel::thread_alpha_V_Addr_A() {
    alpha_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): alpha_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void kernel::thread_alpha_V_Addr_A_orig() {
    alpha_V_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_0);
}

void kernel::thread_alpha_V_Clk_A() {
    alpha_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void kernel::thread_alpha_V_Din_A() {
    alpha_V_Din_A = ap_const_lv32_0;
}

void kernel::thread_alpha_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        alpha_V_EN_A = ap_const_logic_1;
    } else {
        alpha_V_EN_A = ap_const_logic_0;
    }
}

void kernel::thread_alpha_V_Rst_A() {
    alpha_V_Rst_A = ap_rst_n_inv.read();
}

void kernel::thread_alpha_V_WEN_A() {
    alpha_V_WEN_A = ap_const_lv4_0;
}

void kernel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void kernel::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void kernel::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void kernel::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void kernel::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void kernel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void kernel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void kernel::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void kernel::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void kernel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void kernel::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void kernel::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void kernel::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void kernel::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void kernel::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void kernel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void kernel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void kernel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void kernel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void kernel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void kernel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void kernel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void kernel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(icmp_ln31_fu_359_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void kernel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void kernel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(icmp_ln31_fu_359_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void kernel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void kernel::thread_beta_V_Addr_A() {
    beta_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): beta_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void kernel::thread_beta_V_Addr_A_orig() {
    beta_V_Addr_A_orig =  (sc_lv<32>) (ap_const_lv64_0);
}

void kernel::thread_beta_V_Clk_A() {
    beta_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void kernel::thread_beta_V_Din_A() {
    beta_V_Din_A = ap_const_lv32_0;
}

void kernel::thread_beta_V_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        beta_V_EN_A = ap_const_logic_1;
    } else {
        beta_V_EN_A = ap_const_logic_0;
    }
}

void kernel::thread_beta_V_Rst_A() {
    beta_V_Rst_A = ap_rst_n_inv.read();
}

void kernel::thread_beta_V_WEN_A() {
    beta_V_WEN_A = ap_const_lv4_0;
}

void kernel::thread_i1_fu_365_p2() {
    i1_fu_365_p2 = (!i1_0_reg_204.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i1_0_reg_204.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel::thread_i_fu_254_p2() {
    i_fu_254_p2 = (!i_0_reg_158.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_158.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel::thread_icmp_ln13_fu_248_p2() {
    icmp_ln13_fu_248_p2 = (!i_0_reg_158.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_158.read() == ap_const_lv4_8);
}

void kernel::thread_icmp_ln16_fu_272_p2() {
    icmp_ln16_fu_272_p2 = (!j_0_reg_169.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_169.read() == ap_const_lv4_8);
}

void kernel::thread_icmp_ln21_fu_298_p2() {
    icmp_ln21_fu_298_p2 = (!k_0_reg_193.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_193.read() == ap_const_lv4_8);
}

void kernel::thread_icmp_ln31_fu_359_p2() {
    icmp_ln31_fu_359_p2 = (!i1_0_reg_204.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(i1_0_reg_204.read() == ap_const_lv4_8);
}

void kernel::thread_icmp_ln34_fu_383_p2() {
    icmp_ln34_fu_383_p2 = (!j1_0_reg_215.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(j1_0_reg_215.read() == ap_const_lv4_8);
}

void kernel::thread_icmp_ln41_fu_413_p2() {
    icmp_ln41_fu_413_p2 = (!k1_0_reg_237.read().is_01() || !ap_const_lv4_8.is_01())? sc_lv<1>(): sc_lv<1>(k1_0_reg_237.read() == ap_const_lv4_8);
}

void kernel::thread_j1_fu_389_p2() {
    j1_fu_389_p2 = (!j1_0_reg_215.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j1_0_reg_215.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel::thread_j_fu_278_p2() {
    j_fu_278_p2 = (!j_0_reg_169.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_169.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel::thread_k1_fu_419_p2() {
    k1_fu_419_p2 = (!k1_0_reg_237.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(k1_0_reg_237.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel::thread_k_fu_304_p2() {
    k_fu_304_p2 = (!k_0_reg_193.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(k_0_reg_193.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void kernel::thread_tmp_4_fu_260_p3() {
    tmp_4_fu_260_p3 = esl_concat<4,3>(i_0_reg_158.read(), ap_const_lv3_0);
}

void kernel::thread_tmp_5_fu_371_p3() {
    tmp_5_fu_371_p3 = esl_concat<4,3>(i1_0_reg_204.read(), ap_const_lv3_0);
}

void kernel::thread_tmp_6_fu_324_p3() {
    tmp_6_fu_324_p3 = esl_concat<4,3>(k_0_reg_193.read(), ap_const_lv3_0);
}

void kernel::thread_tmp_7_fu_439_p3() {
    tmp_7_fu_439_p3 = esl_concat<4,3>(k1_0_reg_237.read(), ap_const_lv3_0);
}

void kernel::thread_tmp_V_Addr_A() {
    tmp_V_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): tmp_V_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void kernel::thread_tmp_V_Addr_A_orig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        tmp_V_Addr_A_orig =  (sc_lv<32>) (zext_ln215_5_fu_434_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_V_Addr_A_orig =  (sc_lv<32>) (tmp_V_addr_reg_507.read());
    } else {
        tmp_V_Addr_A_orig = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void kernel::thread_tmp_V_Clk_A() {
    tmp_V_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void kernel::thread_tmp_V_Din_A() {
    tmp_V_Din_A = tmp_V_load_reg_180.read();
}

void kernel::thread_tmp_V_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        tmp_V_EN_A = ap_const_logic_1;
    } else {
        tmp_V_EN_A = ap_const_logic_0;
    }
}

void kernel::thread_tmp_V_Rst_A() {
    tmp_V_Rst_A = ap_rst_n_inv.read();
}

void kernel::thread_tmp_V_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_V_WEN_A = ap_const_lv4_F;
    } else {
        tmp_V_WEN_A = ap_const_lv4_0;
    }
}

void kernel::thread_zext_ln16_fu_268_p1() {
    zext_ln16_fu_268_p1 = esl_zext<8,7>(tmp_4_fu_260_p3.read());
}

void kernel::thread_zext_ln215_1_fu_319_p1() {
    zext_ln215_1_fu_319_p1 = esl_zext<64,8>(add_ln215_fu_314_p2.read());
}

void kernel::thread_zext_ln215_2_fu_332_p1() {
    zext_ln215_2_fu_332_p1 = esl_zext<8,7>(tmp_6_fu_324_p3.read());
}

void kernel::thread_zext_ln215_3_fu_341_p1() {
    zext_ln215_3_fu_341_p1 = esl_zext<64,8>(add_ln215_1_fu_336_p2.read());
}

void kernel::thread_zext_ln215_4_fu_425_p1() {
    zext_ln215_4_fu_425_p1 = esl_zext<8,4>(k1_0_reg_237.read());
}

void kernel::thread_zext_ln215_5_fu_434_p1() {
    zext_ln215_5_fu_434_p1 = esl_zext<64,8>(add_ln215_2_fu_429_p2.read());
}

void kernel::thread_zext_ln215_6_fu_447_p1() {
    zext_ln215_6_fu_447_p1 = esl_zext<8,7>(tmp_7_fu_439_p3.read());
}

void kernel::thread_zext_ln215_7_fu_456_p1() {
    zext_ln215_7_fu_456_p1 = esl_zext<64,8>(add_ln215_3_fu_451_p2.read());
}

void kernel::thread_zext_ln215_fu_310_p1() {
    zext_ln215_fu_310_p1 = esl_zext<8,4>(k_0_reg_193.read());
}

void kernel::thread_zext_ln321_1_fu_293_p1() {
    zext_ln321_1_fu_293_p1 = esl_zext<64,8>(add_ln321_fu_288_p2.read());
}

void kernel::thread_zext_ln321_fu_284_p1() {
    zext_ln321_fu_284_p1 = esl_zext<8,4>(j_0_reg_169.read());
}

void kernel::thread_zext_ln34_fu_379_p1() {
    zext_ln34_fu_379_p1 = esl_zext<8,7>(tmp_5_fu_371_p3.read());
}

void kernel::thread_zext_ln37_1_fu_404_p1() {
    zext_ln37_1_fu_404_p1 = esl_zext<64,8>(add_ln37_fu_399_p2.read());
}

void kernel::thread_zext_ln37_fu_395_p1() {
    zext_ln37_fu_395_p1 = esl_zext<8,4>(j1_0_reg_215.read());
}

void kernel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln13_fu_248_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_272_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_298_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(icmp_ln31_fu_359_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(icmp_ln34_fu_383_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(icmp_ln41_fu_413_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<25>) ("XXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void kernel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"alpha_V_Addr_A\" :  \"" << alpha_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"alpha_V_EN_A\" :  \"" << alpha_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"alpha_V_WEN_A\" :  \"" << alpha_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"alpha_V_Din_A\" :  \"" << alpha_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"alpha_V_Dout_A\" :  \"" << alpha_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"alpha_V_Clk_A\" :  \"" << alpha_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"alpha_V_Rst_A\" :  \"" << alpha_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"beta_V_Addr_A\" :  \"" << beta_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"beta_V_EN_A\" :  \"" << beta_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"beta_V_WEN_A\" :  \"" << beta_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"beta_V_Din_A\" :  \"" << beta_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"beta_V_Dout_A\" :  \"" << beta_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"beta_V_Clk_A\" :  \"" << beta_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"beta_V_Rst_A\" :  \"" << beta_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tmp_V_Addr_A\" :  \"" << tmp_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tmp_V_EN_A\" :  \"" << tmp_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tmp_V_WEN_A\" :  \"" << tmp_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tmp_V_Din_A\" :  \"" << tmp_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tmp_V_Dout_A\" :  \"" << tmp_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tmp_V_Clk_A\" :  \"" << tmp_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tmp_V_Rst_A\" :  \"" << tmp_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_Addr_A\" :  \"" << A_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_EN_A\" :  \"" << A_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_WEN_A\" :  \"" << A_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_Din_A\" :  \"" << A_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_V_Dout_A\" :  \"" << A_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_Clk_A\" :  \"" << A_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_V_Rst_A\" :  \"" << A_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_V_Addr_A\" :  \"" << B_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_V_EN_A\" :  \"" << B_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_V_WEN_A\" :  \"" << B_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_V_Din_A\" :  \"" << B_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_V_Dout_A\" :  \"" << B_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_V_Clk_A\" :  \"" << B_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_V_Rst_A\" :  \"" << B_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_V_Addr_A\" :  \"" << C_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_V_EN_A\" :  \"" << C_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_V_WEN_A\" :  \"" << C_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_V_Din_A\" :  \"" << C_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_V_Dout_A\" :  \"" << C_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_V_Clk_A\" :  \"" << C_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_V_Rst_A\" :  \"" << C_V_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"D_V_Addr_A\" :  \"" << D_V_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"D_V_EN_A\" :  \"" << D_V_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"D_V_WEN_A\" :  \"" << D_V_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"D_V_Din_A\" :  \"" << D_V_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"D_V_Dout_A\" :  \"" << D_V_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"D_V_Clk_A\" :  \"" << D_V_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"D_V_Rst_A\" :  \"" << D_V_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    alpha_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    alpha_V_EN_A : OUT STD_LOGIC;
    alpha_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    alpha_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    alpha_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    alpha_V_Clk_A : OUT STD_LOGIC;
    alpha_V_Rst_A : OUT STD_LOGIC;
    beta_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    beta_V_EN_A : OUT STD_LOGIC;
    beta_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    beta_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    beta_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    beta_V_Clk_A : OUT STD_LOGIC;
    beta_V_Rst_A : OUT STD_LOGIC;
    tmp_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_V_EN_A : OUT STD_LOGIC;
    tmp_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    tmp_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    tmp_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_V_Clk_A : OUT STD_LOGIC;
    tmp_V_Rst_A : OUT STD_LOGIC;
    A_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_V_EN_A : OUT STD_LOGIC;
    A_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    A_V_Clk_A : OUT STD_LOGIC;
    A_V_Rst_A : OUT STD_LOGIC;
    B_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_V_EN_A : OUT STD_LOGIC;
    B_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    B_V_Clk_A : OUT STD_LOGIC;
    B_V_Rst_A : OUT STD_LOGIC;
    C_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_V_EN_A : OUT STD_LOGIC;
    C_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    C_V_Clk_A : OUT STD_LOGIC;
    C_V_Rst_A : OUT STD_LOGIC;
    D_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_V_EN_A : OUT STD_LOGIC;
    D_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    D_V_Clk_A : OUT STD_LOGIC;
    D_V_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.745000,HLS_SYN_LAT=8290,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=1217,HLS_SYN_LUT=789,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal i_fu_254_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_483 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln16_fu_268_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln16_reg_488 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_278_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_497 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln321_fu_284_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln16_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_addr_reg_507 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_fu_304_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln21_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_load_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal B_V_load_reg_535 : STD_LOGIC_VECTOR (31 downto 0);
    signal alpha_V_load_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln209_1_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln700_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i1_fu_365_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_reg_563 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln34_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln31_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j1_fu_389_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j1_reg_577 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln37_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln37_reg_582 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal D_V_addr_reg_587 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_tmp_V_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal beta_V_load_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln209_reg_602 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal k1_fu_419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k1_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln41_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_load_1_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal C_V_load_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_V_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln700_1_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_0_reg_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_V_load_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_193 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_0_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal j1_0_reg_215 : STD_LOGIC_VECTOR (3 downto 0);
    signal D_V_load_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal k1_0_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln321_1_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_3_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_1_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_5_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal A_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal alpha_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal D_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal C_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_260_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln321_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_324_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_2_fu_332_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_1_fu_336_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_5_fu_371_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln215_4_fu_425_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_2_fu_429_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_439_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_6_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_3_fu_451_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component kernel_mul_32s_32s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    kernel_control_s_axi_U : component kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    kernel_mul_32s_32s_32_3_1_U1 : component kernel_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_V_load_reg_530,
        din1 => B_V_load_reg_535,
        ce => ap_const_logic_1,
        dout => grp_fu_346_p2);

    kernel_mul_32s_32s_32_3_1_U2 : component kernel_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_ln209_1_reg_545,
        din1 => alpha_V_load_reg_540,
        ce => ap_const_logic_1,
        dout => grp_fu_350_p2);

    kernel_mul_32s_32s_32_3_1_U3 : component kernel_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => beta_V_load_reg_597,
        din1 => d_tmp_V_reg_592,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p2);

    kernel_mul_32s_32s_32_3_1_U4 : component kernel_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_V_load_1_reg_625,
        din1 => C_V_load_reg_630,
        ce => ap_const_logic_1,
        dout => grp_fu_461_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    D_V_load_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                D_V_load_reg_226 <= add_ln700_1_fu_465_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                D_V_load_reg_226 <= mul_ln209_reg_602;
            end if; 
        end if;
    end process;

    i1_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_248_p2 = ap_const_lv1_1))) then 
                i1_0_reg_204 <= ap_const_lv4_0;
            elsif (((icmp_ln34_fu_383_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i1_0_reg_204 <= i1_reg_563;
            end if; 
        end if;
    end process;

    i_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_272_p2 = ap_const_lv1_1))) then 
                i_0_reg_158 <= i_reg_483;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_158 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j1_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                j1_0_reg_215 <= j1_reg_577;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln31_fu_359_p2 = ap_const_lv1_0))) then 
                j1_0_reg_215 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_298_p2 = ap_const_lv1_1))) then 
                j_0_reg_169 <= j_reg_497;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_248_p2 = ap_const_lv1_0))) then 
                j_0_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k1_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                k1_0_reg_237 <= k1_reg_610;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                k1_0_reg_237 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_0_reg_193 <= k_reg_515;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_272_p2 = ap_const_lv1_0))) then 
                k_0_reg_193 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tmp_V_load_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                tmp_V_load_reg_180 <= add_ln700_fu_354_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_272_p2 = ap_const_lv1_0))) then 
                tmp_V_load_reg_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                A_V_load_reg_530 <= A_V_Dout_A;
                B_V_load_reg_535 <= B_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                C_V_load_reg_630 <= C_V_Dout_A;
                tmp_V_load_1_reg_625 <= tmp_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln34_fu_383_p2 = ap_const_lv1_0))) then
                D_V_addr_reg_587 <= zext_ln37_1_fu_404_p1(6 - 1 downto 0);
                    zext_ln37_reg_582(3 downto 0) <= zext_ln37_fu_395_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                alpha_V_load_reg_540 <= alpha_V_Dout_A;
                mul_ln209_1_reg_545 <= grp_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                beta_V_load_reg_597 <= beta_V_Dout_A;
                d_tmp_V_reg_592 <= D_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i1_reg_563 <= i1_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_483 <= i_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                j1_reg_577 <= j1_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_497 <= j_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                k1_reg_610 <= k1_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_515 <= k_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mul_ln209_reg_602 <= grp_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_272_p2 = ap_const_lv1_0))) then
                tmp_V_addr_reg_507 <= zext_ln321_1_fu_293_p1(6 - 1 downto 0);
                    zext_ln321_reg_502(3 downto 0) <= zext_ln321_fu_284_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                v1_V_reg_635 <= grp_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                v_V_reg_550 <= grp_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_248_p2 = ap_const_lv1_0))) then
                    zext_ln16_reg_488(6 downto 3) <= zext_ln16_fu_268_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln31_fu_359_p2 = ap_const_lv1_0))) then
                    zext_ln34_reg_568(6 downto 3) <= zext_ln34_fu_379_p1(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln16_reg_488(2 downto 0) <= "000";
    zext_ln16_reg_488(7) <= '0';
    zext_ln321_reg_502(7 downto 4) <= "0000";
    zext_ln34_reg_568(2 downto 0) <= "000";
    zext_ln34_reg_568(7) <= '0';
    zext_ln37_reg_582(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_248_p2, ap_CS_fsm_state3, icmp_ln16_fu_272_p2, ap_CS_fsm_state4, icmp_ln21_fu_298_p2, ap_CS_fsm_state13, icmp_ln31_fu_359_p2, ap_CS_fsm_state14, icmp_ln34_fu_383_p2, ap_CS_fsm_state20, icmp_ln41_fu_413_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_248_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_272_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_298_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln31_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln34_fu_383_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln41_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_V_Addr_A <= std_logic_vector(shift_left(unsigned(A_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    A_V_Addr_A_orig <= zext_ln215_1_fu_319_p1(32 - 1 downto 0);
    A_V_Clk_A <= ap_clk;
    A_V_Din_A <= ap_const_lv32_0;

    A_V_EN_A_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_V_EN_A <= ap_const_logic_1;
        else 
            A_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    A_V_Rst_A <= ap_rst_n_inv;
    A_V_WEN_A <= ap_const_lv4_0;
    B_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    B_V_Addr_A_orig <= zext_ln215_3_fu_341_p1(32 - 1 downto 0);
    B_V_Clk_A <= ap_clk;
    B_V_Din_A <= ap_const_lv32_0;

    B_V_EN_A_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_V_EN_A <= ap_const_logic_1;
        else 
            B_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_V_Rst_A <= ap_rst_n_inv;
    B_V_WEN_A <= ap_const_lv4_0;
    C_V_Addr_A <= std_logic_vector(shift_left(unsigned(C_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    C_V_Addr_A_orig <= zext_ln215_7_fu_456_p1(32 - 1 downto 0);
    C_V_Clk_A <= ap_clk;
    C_V_Din_A <= ap_const_lv32_0;

    C_V_EN_A_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            C_V_EN_A <= ap_const_logic_1;
        else 
            C_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    C_V_Rst_A <= ap_rst_n_inv;
    C_V_WEN_A <= ap_const_lv4_0;
    D_V_Addr_A <= std_logic_vector(shift_left(unsigned(D_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    D_V_Addr_A_orig_assign_proc : process(ap_CS_fsm_state14, D_V_addr_reg_587, ap_CS_fsm_state20, zext_ln37_1_fu_404_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            D_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(D_V_addr_reg_587),32));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            D_V_Addr_A_orig <= zext_ln37_1_fu_404_p1(32 - 1 downto 0);
        else 
            D_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    D_V_Clk_A <= ap_clk;
    D_V_Din_A <= D_V_load_reg_226;

    D_V_EN_A_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            D_V_EN_A <= ap_const_logic_1;
        else 
            D_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    D_V_Rst_A <= ap_rst_n_inv;

    D_V_WEN_A_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            D_V_WEN_A <= ap_const_lv4_F;
        else 
            D_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    add_ln215_1_fu_336_p2 <= std_logic_vector(unsigned(zext_ln321_reg_502) + unsigned(zext_ln215_2_fu_332_p1));
    add_ln215_2_fu_429_p2 <= std_logic_vector(unsigned(zext_ln215_4_fu_425_p1) + unsigned(zext_ln34_reg_568));
    add_ln215_3_fu_451_p2 <= std_logic_vector(unsigned(zext_ln37_reg_582) + unsigned(zext_ln215_6_fu_447_p1));
    add_ln215_fu_314_p2 <= std_logic_vector(unsigned(zext_ln215_fu_310_p1) + unsigned(zext_ln16_reg_488));
    add_ln321_fu_288_p2 <= std_logic_vector(unsigned(zext_ln16_reg_488) + unsigned(zext_ln321_fu_284_p1));
    add_ln37_fu_399_p2 <= std_logic_vector(unsigned(zext_ln34_reg_568) + unsigned(zext_ln37_fu_395_p1));
    add_ln700_1_fu_465_p2 <= std_logic_vector(unsigned(D_V_load_reg_226) + unsigned(v1_V_reg_635));
    add_ln700_fu_354_p2 <= std_logic_vector(unsigned(tmp_V_load_reg_180) + unsigned(v_V_reg_550));
    alpha_V_Addr_A <= std_logic_vector(shift_left(unsigned(alpha_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    alpha_V_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
    alpha_V_Clk_A <= ap_clk;
    alpha_V_Din_A <= ap_const_lv32_0;

    alpha_V_EN_A_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            alpha_V_EN_A <= ap_const_logic_1;
        else 
            alpha_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    alpha_V_Rst_A <= ap_rst_n_inv;
    alpha_V_WEN_A <= ap_const_lv4_0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state13, icmp_ln31_fu_359_p2)
    begin
        if (((icmp_ln31_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, icmp_ln31_fu_359_p2)
    begin
        if (((icmp_ln31_fu_359_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    beta_V_Addr_A <= std_logic_vector(shift_left(unsigned(beta_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    beta_V_Addr_A_orig <= ap_const_lv64_0(32 - 1 downto 0);
    beta_V_Clk_A <= ap_clk;
    beta_V_Din_A <= ap_const_lv32_0;

    beta_V_EN_A_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            beta_V_EN_A <= ap_const_logic_1;
        else 
            beta_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    beta_V_Rst_A <= ap_rst_n_inv;
    beta_V_WEN_A <= ap_const_lv4_0;
    i1_fu_365_p2 <= std_logic_vector(unsigned(i1_0_reg_204) + unsigned(ap_const_lv4_1));
    i_fu_254_p2 <= std_logic_vector(unsigned(i_0_reg_158) + unsigned(ap_const_lv4_1));
    icmp_ln13_fu_248_p2 <= "1" when (i_0_reg_158 = ap_const_lv4_8) else "0";
    icmp_ln16_fu_272_p2 <= "1" when (j_0_reg_169 = ap_const_lv4_8) else "0";
    icmp_ln21_fu_298_p2 <= "1" when (k_0_reg_193 = ap_const_lv4_8) else "0";
    icmp_ln31_fu_359_p2 <= "1" when (i1_0_reg_204 = ap_const_lv4_8) else "0";
    icmp_ln34_fu_383_p2 <= "1" when (j1_0_reg_215 = ap_const_lv4_8) else "0";
    icmp_ln41_fu_413_p2 <= "1" when (k1_0_reg_237 = ap_const_lv4_8) else "0";
    j1_fu_389_p2 <= std_logic_vector(unsigned(j1_0_reg_215) + unsigned(ap_const_lv4_1));
    j_fu_278_p2 <= std_logic_vector(unsigned(j_0_reg_169) + unsigned(ap_const_lv4_1));
    k1_fu_419_p2 <= std_logic_vector(unsigned(k1_0_reg_237) + unsigned(ap_const_lv4_1));
    k_fu_304_p2 <= std_logic_vector(unsigned(k_0_reg_193) + unsigned(ap_const_lv4_1));
    tmp_4_fu_260_p3 <= (i_0_reg_158 & ap_const_lv3_0);
    tmp_5_fu_371_p3 <= (i1_0_reg_204 & ap_const_lv3_0);
    tmp_6_fu_324_p3 <= (k_0_reg_193 & ap_const_lv3_0);
    tmp_7_fu_439_p3 <= (k1_0_reg_237 & ap_const_lv3_0);
    tmp_V_Addr_A <= std_logic_vector(shift_left(unsigned(tmp_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    tmp_V_Addr_A_orig_assign_proc : process(tmp_V_addr_reg_507, ap_CS_fsm_state4, ap_CS_fsm_state20, zext_ln215_5_fu_434_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tmp_V_Addr_A_orig <= zext_ln215_5_fu_434_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_addr_reg_507),32));
        else 
            tmp_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_V_Clk_A <= ap_clk;
    tmp_V_Din_A <= tmp_V_load_reg_180;

    tmp_V_EN_A_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmp_V_EN_A <= ap_const_logic_1;
        else 
            tmp_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_Rst_A <= ap_rst_n_inv;

    tmp_V_WEN_A_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmp_V_WEN_A <= ap_const_lv4_F;
        else 
            tmp_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    zext_ln16_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_260_p3),8));
    zext_ln215_1_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_314_p2),64));
    zext_ln215_2_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_324_p3),8));
    zext_ln215_3_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_336_p2),64));
    zext_ln215_4_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k1_0_reg_237),8));
    zext_ln215_5_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_2_fu_429_p2),64));
    zext_ln215_6_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_439_p3),8));
    zext_ln215_7_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_3_fu_451_p2),64));
    zext_ln215_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_193),8));
    zext_ln321_1_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_288_p2),64));
    zext_ln321_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_169),8));
    zext_ln34_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_371_p3),8));
    zext_ln37_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_399_p2),64));
    zext_ln37_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_0_reg_215),8));
end behav;

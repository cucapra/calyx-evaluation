// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.745000,HLS_SYN_LAT=8290,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=1217,HLS_SYN_LUT=789,HLS_VERSION=2019_1}" *)

module kernel (
        ap_clk,
        ap_rst_n,
        alpha_V_Addr_A,
        alpha_V_EN_A,
        alpha_V_WEN_A,
        alpha_V_Din_A,
        alpha_V_Dout_A,
        alpha_V_Clk_A,
        alpha_V_Rst_A,
        beta_V_Addr_A,
        beta_V_EN_A,
        beta_V_WEN_A,
        beta_V_Din_A,
        beta_V_Dout_A,
        beta_V_Clk_A,
        beta_V_Rst_A,
        tmp_V_Addr_A,
        tmp_V_EN_A,
        tmp_V_WEN_A,
        tmp_V_Din_A,
        tmp_V_Dout_A,
        tmp_V_Clk_A,
        tmp_V_Rst_A,
        A_V_Addr_A,
        A_V_EN_A,
        A_V_WEN_A,
        A_V_Din_A,
        A_V_Dout_A,
        A_V_Clk_A,
        A_V_Rst_A,
        B_V_Addr_A,
        B_V_EN_A,
        B_V_WEN_A,
        B_V_Din_A,
        B_V_Dout_A,
        B_V_Clk_A,
        B_V_Rst_A,
        C_V_Addr_A,
        C_V_EN_A,
        C_V_WEN_A,
        C_V_Din_A,
        C_V_Dout_A,
        C_V_Clk_A,
        C_V_Rst_A,
        D_V_Addr_A,
        D_V_EN_A,
        D_V_WEN_A,
        D_V_Din_A,
        D_V_Dout_A,
        D_V_Clk_A,
        D_V_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] alpha_V_Addr_A;
output   alpha_V_EN_A;
output  [3:0] alpha_V_WEN_A;
output  [31:0] alpha_V_Din_A;
input  [31:0] alpha_V_Dout_A;
output   alpha_V_Clk_A;
output   alpha_V_Rst_A;
output  [31:0] beta_V_Addr_A;
output   beta_V_EN_A;
output  [3:0] beta_V_WEN_A;
output  [31:0] beta_V_Din_A;
input  [31:0] beta_V_Dout_A;
output   beta_V_Clk_A;
output   beta_V_Rst_A;
output  [31:0] tmp_V_Addr_A;
output   tmp_V_EN_A;
output  [3:0] tmp_V_WEN_A;
output  [31:0] tmp_V_Din_A;
input  [31:0] tmp_V_Dout_A;
output   tmp_V_Clk_A;
output   tmp_V_Rst_A;
output  [31:0] A_V_Addr_A;
output   A_V_EN_A;
output  [3:0] A_V_WEN_A;
output  [31:0] A_V_Din_A;
input  [31:0] A_V_Dout_A;
output   A_V_Clk_A;
output   A_V_Rst_A;
output  [31:0] B_V_Addr_A;
output   B_V_EN_A;
output  [3:0] B_V_WEN_A;
output  [31:0] B_V_Din_A;
input  [31:0] B_V_Dout_A;
output   B_V_Clk_A;
output   B_V_Rst_A;
output  [31:0] C_V_Addr_A;
output   C_V_EN_A;
output  [3:0] C_V_WEN_A;
output  [31:0] C_V_Din_A;
input  [31:0] C_V_Dout_A;
output   C_V_Clk_A;
output   C_V_Rst_A;
output  [31:0] D_V_Addr_A;
output   D_V_EN_A;
output  [3:0] D_V_WEN_A;
output  [31:0] D_V_Din_A;
input  [31:0] D_V_Dout_A;
output   D_V_Clk_A;
output   D_V_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg alpha_V_EN_A;
reg beta_V_EN_A;
reg tmp_V_EN_A;
reg[3:0] tmp_V_WEN_A;
reg A_V_EN_A;
reg B_V_EN_A;
reg C_V_EN_A;
reg D_V_EN_A;
reg[3:0] D_V_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] i_fu_254_p2;
reg   [3:0] i_reg_483;
wire    ap_CS_fsm_state2;
wire   [7:0] zext_ln16_fu_268_p1;
reg   [7:0] zext_ln16_reg_488;
wire   [0:0] icmp_ln13_fu_248_p2;
wire   [3:0] j_fu_278_p2;
reg   [3:0] j_reg_497;
wire    ap_CS_fsm_state3;
wire   [7:0] zext_ln321_fu_284_p1;
reg   [7:0] zext_ln321_reg_502;
wire   [0:0] icmp_ln16_fu_272_p2;
reg   [5:0] tmp_V_addr_reg_507;
wire   [3:0] k_fu_304_p2;
reg   [3:0] k_reg_515;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln21_fu_298_p2;
reg  signed [31:0] A_V_load_reg_530;
wire    ap_CS_fsm_state5;
reg  signed [31:0] B_V_load_reg_535;
reg  signed [31:0] alpha_V_load_reg_540;
wire    ap_CS_fsm_state8;
wire  signed [31:0] grp_fu_346_p2;
reg  signed [31:0] mul_ln209_1_reg_545;
wire   [31:0] grp_fu_350_p2;
reg   [31:0] v_V_reg_550;
wire    ap_CS_fsm_state11;
wire   [31:0] add_ln700_fu_354_p2;
wire    ap_CS_fsm_state12;
wire   [3:0] i1_fu_365_p2;
reg   [3:0] i1_reg_563;
wire    ap_CS_fsm_state13;
wire   [7:0] zext_ln34_fu_379_p1;
reg   [7:0] zext_ln34_reg_568;
wire   [0:0] icmp_ln31_fu_359_p2;
wire   [3:0] j1_fu_389_p2;
reg   [3:0] j1_reg_577;
wire    ap_CS_fsm_state14;
wire   [7:0] zext_ln37_fu_395_p1;
reg   [7:0] zext_ln37_reg_582;
wire   [0:0] icmp_ln34_fu_383_p2;
reg   [5:0] D_V_addr_reg_587;
reg  signed [31:0] d_tmp_V_reg_592;
wire    ap_CS_fsm_state15;
reg  signed [31:0] beta_V_load_reg_597;
wire   [31:0] grp_fu_409_p2;
reg   [31:0] mul_ln209_reg_602;
wire    ap_CS_fsm_state18;
wire   [3:0] k1_fu_419_p2;
reg   [3:0] k1_reg_610;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln41_fu_413_p2;
reg  signed [31:0] tmp_V_load_1_reg_625;
wire    ap_CS_fsm_state21;
reg  signed [31:0] C_V_load_reg_630;
wire   [31:0] grp_fu_461_p2;
reg   [31:0] v1_V_reg_635;
wire    ap_CS_fsm_state24;
wire   [31:0] add_ln700_1_fu_465_p2;
wire    ap_CS_fsm_state25;
reg   [3:0] i_0_reg_158;
reg   [3:0] j_0_reg_169;
reg   [31:0] tmp_V_load_reg_180;
reg   [3:0] k_0_reg_193;
reg   [3:0] i1_0_reg_204;
reg   [3:0] j1_0_reg_215;
reg   [31:0] D_V_load_reg_226;
wire    ap_CS_fsm_state19;
reg   [3:0] k1_0_reg_237;
wire   [63:0] zext_ln321_1_fu_293_p1;
wire   [63:0] zext_ln215_1_fu_319_p1;
wire   [63:0] zext_ln215_3_fu_341_p1;
wire   [63:0] zext_ln37_1_fu_404_p1;
wire   [63:0] zext_ln215_5_fu_434_p1;
wire   [63:0] zext_ln215_7_fu_456_p1;
reg   [31:0] tmp_V_Addr_A_orig;
wire   [31:0] A_V_Addr_A_orig;
wire   [31:0] B_V_Addr_A_orig;
wire    ap_CS_fsm_state7;
wire   [31:0] alpha_V_Addr_A_orig;
reg   [31:0] D_V_Addr_A_orig;
wire   [31:0] beta_V_Addr_A_orig;
wire   [31:0] C_V_Addr_A_orig;
wire   [6:0] tmp_4_fu_260_p3;
wire   [7:0] add_ln321_fu_288_p2;
wire   [7:0] zext_ln215_fu_310_p1;
wire   [7:0] add_ln215_fu_314_p2;
wire   [6:0] tmp_6_fu_324_p3;
wire   [7:0] zext_ln215_2_fu_332_p1;
wire   [7:0] add_ln215_1_fu_336_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state9;
wire   [6:0] tmp_5_fu_371_p3;
wire   [7:0] add_ln37_fu_399_p2;
wire    ap_CS_fsm_state16;
wire   [7:0] zext_ln215_4_fu_425_p1;
wire   [7:0] add_ln215_2_fu_429_p2;
wire   [6:0] tmp_7_fu_439_p3;
wire   [7:0] zext_ln215_6_fu_447_p1;
wire   [7:0] add_ln215_3_fu_451_p2;
wire    ap_CS_fsm_state22;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
kernel_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

kernel_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_mul_32s_32s_32_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_V_load_reg_530),
    .din1(B_V_load_reg_535),
    .ce(1'b1),
    .dout(grp_fu_346_p2)
);

kernel_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_mul_32s_32s_32_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mul_ln209_1_reg_545),
    .din1(alpha_V_load_reg_540),
    .ce(1'b1),
    .dout(grp_fu_350_p2)
);

kernel_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_mul_32s_32s_32_3_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(beta_V_load_reg_597),
    .din1(d_tmp_V_reg_592),
    .ce(1'b1),
    .dout(grp_fu_409_p2)
);

kernel_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_mul_32s_32s_32_3_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_V_load_1_reg_625),
    .din1(C_V_load_reg_630),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        D_V_load_reg_226 <= add_ln700_1_fu_465_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        D_V_load_reg_226 <= mul_ln209_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_248_p2 == 1'd1))) begin
        i1_0_reg_204 <= 4'd0;
    end else if (((icmp_ln34_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i1_0_reg_204 <= i1_reg_563;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_272_p2 == 1'd1))) begin
        i_0_reg_158 <= i_reg_483;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_158 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        j1_0_reg_215 <= j1_reg_577;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln31_fu_359_p2 == 1'd0))) begin
        j1_0_reg_215 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_298_p2 == 1'd1))) begin
        j_0_reg_169 <= j_reg_497;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_248_p2 == 1'd0))) begin
        j_0_reg_169 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        k1_0_reg_237 <= k1_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        k1_0_reg_237 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_0_reg_193 <= k_reg_515;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_272_p2 == 1'd0))) begin
        k_0_reg_193 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_V_load_reg_180 <= add_ln700_fu_354_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_272_p2 == 1'd0))) begin
        tmp_V_load_reg_180 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_V_load_reg_530 <= A_V_Dout_A;
        B_V_load_reg_535 <= B_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        C_V_load_reg_630 <= C_V_Dout_A;
        tmp_V_load_1_reg_625 <= tmp_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln34_fu_383_p2 == 1'd0))) begin
        D_V_addr_reg_587 <= zext_ln37_1_fu_404_p1;
        zext_ln37_reg_582[3 : 0] <= zext_ln37_fu_395_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        alpha_V_load_reg_540 <= alpha_V_Dout_A;
        mul_ln209_1_reg_545 <= grp_fu_346_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        beta_V_load_reg_597 <= beta_V_Dout_A;
        d_tmp_V_reg_592 <= D_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i1_reg_563 <= i1_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_483 <= i_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j1_reg_577 <= j1_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_497 <= j_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        k1_reg_610 <= k1_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_515 <= k_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        mul_ln209_reg_602 <= grp_fu_409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_272_p2 == 1'd0))) begin
        tmp_V_addr_reg_507 <= zext_ln321_1_fu_293_p1;
        zext_ln321_reg_502[3 : 0] <= zext_ln321_fu_284_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        v1_V_reg_635 <= grp_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        v_V_reg_550 <= grp_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_248_p2 == 1'd0))) begin
        zext_ln16_reg_488[6 : 3] <= zext_ln16_fu_268_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln31_fu_359_p2 == 1'd0))) begin
        zext_ln34_reg_568[6 : 3] <= zext_ln34_fu_379_p1[6 : 3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_V_EN_A = 1'b1;
    end else begin
        A_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_V_EN_A = 1'b1;
    end else begin
        B_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        C_V_EN_A = 1'b1;
    end else begin
        C_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        D_V_Addr_A_orig = D_V_addr_reg_587;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        D_V_Addr_A_orig = zext_ln37_1_fu_404_p1;
    end else begin
        D_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state14))) begin
        D_V_EN_A = 1'b1;
    end else begin
        D_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        D_V_WEN_A = 4'd15;
    end else begin
        D_V_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        alpha_V_EN_A = 1'b1;
    end else begin
        alpha_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        beta_V_EN_A = 1'b1;
    end else begin
        beta_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_V_Addr_A_orig = zext_ln215_5_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_Addr_A_orig = tmp_V_addr_reg_507;
    end else begin
        tmp_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_EN_A = 1'b1;
    end else begin
        tmp_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_V_WEN_A = 4'd15;
    end else begin
        tmp_V_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_248_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_272_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_298_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln31_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln34_fu_383_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln41_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_Addr_A = A_V_Addr_A_orig << 32'd2;

assign A_V_Addr_A_orig = zext_ln215_1_fu_319_p1;

assign A_V_Clk_A = ap_clk;

assign A_V_Din_A = 32'd0;

assign A_V_Rst_A = ap_rst_n_inv;

assign A_V_WEN_A = 4'd0;

assign B_V_Addr_A = B_V_Addr_A_orig << 32'd2;

assign B_V_Addr_A_orig = zext_ln215_3_fu_341_p1;

assign B_V_Clk_A = ap_clk;

assign B_V_Din_A = 32'd0;

assign B_V_Rst_A = ap_rst_n_inv;

assign B_V_WEN_A = 4'd0;

assign C_V_Addr_A = C_V_Addr_A_orig << 32'd2;

assign C_V_Addr_A_orig = zext_ln215_7_fu_456_p1;

assign C_V_Clk_A = ap_clk;

assign C_V_Din_A = 32'd0;

assign C_V_Rst_A = ap_rst_n_inv;

assign C_V_WEN_A = 4'd0;

assign D_V_Addr_A = D_V_Addr_A_orig << 32'd2;

assign D_V_Clk_A = ap_clk;

assign D_V_Din_A = D_V_load_reg_226;

assign D_V_Rst_A = ap_rst_n_inv;

assign add_ln215_1_fu_336_p2 = (zext_ln321_reg_502 + zext_ln215_2_fu_332_p1);

assign add_ln215_2_fu_429_p2 = (zext_ln215_4_fu_425_p1 + zext_ln34_reg_568);

assign add_ln215_3_fu_451_p2 = (zext_ln37_reg_582 + zext_ln215_6_fu_447_p1);

assign add_ln215_fu_314_p2 = (zext_ln215_fu_310_p1 + zext_ln16_reg_488);

assign add_ln321_fu_288_p2 = (zext_ln16_reg_488 + zext_ln321_fu_284_p1);

assign add_ln37_fu_399_p2 = (zext_ln34_reg_568 + zext_ln37_fu_395_p1);

assign add_ln700_1_fu_465_p2 = (D_V_load_reg_226 + v1_V_reg_635);

assign add_ln700_fu_354_p2 = (tmp_V_load_reg_180 + v_V_reg_550);

assign alpha_V_Addr_A = alpha_V_Addr_A_orig << 32'd2;

assign alpha_V_Addr_A_orig = 64'd0;

assign alpha_V_Clk_A = ap_clk;

assign alpha_V_Din_A = 32'd0;

assign alpha_V_Rst_A = ap_rst_n_inv;

assign alpha_V_WEN_A = 4'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign beta_V_Addr_A = beta_V_Addr_A_orig << 32'd2;

assign beta_V_Addr_A_orig = 64'd0;

assign beta_V_Clk_A = ap_clk;

assign beta_V_Din_A = 32'd0;

assign beta_V_Rst_A = ap_rst_n_inv;

assign beta_V_WEN_A = 4'd0;

assign i1_fu_365_p2 = (i1_0_reg_204 + 4'd1);

assign i_fu_254_p2 = (i_0_reg_158 + 4'd1);

assign icmp_ln13_fu_248_p2 = ((i_0_reg_158 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_272_p2 = ((j_0_reg_169 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_298_p2 = ((k_0_reg_193 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_359_p2 = ((i1_0_reg_204 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_383_p2 = ((j1_0_reg_215 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_413_p2 = ((k1_0_reg_237 == 4'd8) ? 1'b1 : 1'b0);

assign j1_fu_389_p2 = (j1_0_reg_215 + 4'd1);

assign j_fu_278_p2 = (j_0_reg_169 + 4'd1);

assign k1_fu_419_p2 = (k1_0_reg_237 + 4'd1);

assign k_fu_304_p2 = (k_0_reg_193 + 4'd1);

assign tmp_4_fu_260_p3 = {{i_0_reg_158}, {3'd0}};

assign tmp_5_fu_371_p3 = {{i1_0_reg_204}, {3'd0}};

assign tmp_6_fu_324_p3 = {{k_0_reg_193}, {3'd0}};

assign tmp_7_fu_439_p3 = {{k1_0_reg_237}, {3'd0}};

assign tmp_V_Addr_A = tmp_V_Addr_A_orig << 32'd2;

assign tmp_V_Clk_A = ap_clk;

assign tmp_V_Din_A = tmp_V_load_reg_180;

assign tmp_V_Rst_A = ap_rst_n_inv;

assign zext_ln16_fu_268_p1 = tmp_4_fu_260_p3;

assign zext_ln215_1_fu_319_p1 = add_ln215_fu_314_p2;

assign zext_ln215_2_fu_332_p1 = tmp_6_fu_324_p3;

assign zext_ln215_3_fu_341_p1 = add_ln215_1_fu_336_p2;

assign zext_ln215_4_fu_425_p1 = k1_0_reg_237;

assign zext_ln215_5_fu_434_p1 = add_ln215_2_fu_429_p2;

assign zext_ln215_6_fu_447_p1 = tmp_7_fu_439_p3;

assign zext_ln215_7_fu_456_p1 = add_ln215_3_fu_451_p2;

assign zext_ln215_fu_310_p1 = k_0_reg_193;

assign zext_ln321_1_fu_293_p1 = add_ln321_fu_288_p2;

assign zext_ln321_fu_284_p1 = j_0_reg_169;

assign zext_ln34_fu_379_p1 = tmp_5_fu_371_p3;

assign zext_ln37_1_fu_404_p1 = add_ln37_fu_399_p2;

assign zext_ln37_fu_395_p1 = j1_0_reg_215;

always @ (posedge ap_clk) begin
    zext_ln16_reg_488[2:0] <= 3'b000;
    zext_ln16_reg_488[7] <= 1'b0;
    zext_ln321_reg_502[7:4] <= 4'b0000;
    zext_ln34_reg_568[2:0] <= 3'b000;
    zext_ln34_reg_568[7] <= 1'b0;
    zext_ln37_reg_582[7:4] <= 4'b0000;
end

endmodule //kernel

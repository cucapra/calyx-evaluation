// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kernel,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.745000,HLS_SYN_LAT=9651,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=9,HLS_SYN_FF=1057,HLS_SYN_LUT=941,HLS_VERSION=2019_1}" *)

module kernel (
        ap_clk,
        ap_rst_n,
        E_V_Addr_A,
        E_V_EN_A,
        E_V_WEN_A,
        E_V_Din_A,
        E_V_Dout_A,
        E_V_Clk_A,
        E_V_Rst_A,
        A_V_Addr_A,
        A_V_EN_A,
        A_V_WEN_A,
        A_V_Din_A,
        A_V_Dout_A,
        A_V_Clk_A,
        A_V_Rst_A,
        B_V_Addr_A,
        B_V_EN_A,
        B_V_WEN_A,
        B_V_Din_A,
        B_V_Dout_A,
        B_V_Clk_A,
        B_V_Rst_A,
        F_V_Addr_A,
        F_V_EN_A,
        F_V_WEN_A,
        F_V_Din_A,
        F_V_Dout_A,
        F_V_Clk_A,
        F_V_Rst_A,
        C_V_Addr_A,
        C_V_EN_A,
        C_V_WEN_A,
        C_V_Din_A,
        C_V_Dout_A,
        C_V_Clk_A,
        C_V_Rst_A,
        D_V_Addr_A,
        D_V_EN_A,
        D_V_WEN_A,
        D_V_Din_A,
        D_V_Dout_A,
        D_V_Clk_A,
        D_V_Rst_A,
        G_V_Addr_A,
        G_V_EN_A,
        G_V_WEN_A,
        G_V_Din_A,
        G_V_Dout_A,
        G_V_Clk_A,
        G_V_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] E_V_Addr_A;
output   E_V_EN_A;
output  [3:0] E_V_WEN_A;
output  [31:0] E_V_Din_A;
input  [31:0] E_V_Dout_A;
output   E_V_Clk_A;
output   E_V_Rst_A;
output  [31:0] A_V_Addr_A;
output   A_V_EN_A;
output  [3:0] A_V_WEN_A;
output  [31:0] A_V_Din_A;
input  [31:0] A_V_Dout_A;
output   A_V_Clk_A;
output   A_V_Rst_A;
output  [31:0] B_V_Addr_A;
output   B_V_EN_A;
output  [3:0] B_V_WEN_A;
output  [31:0] B_V_Din_A;
input  [31:0] B_V_Dout_A;
output   B_V_Clk_A;
output   B_V_Rst_A;
output  [31:0] F_V_Addr_A;
output   F_V_EN_A;
output  [3:0] F_V_WEN_A;
output  [31:0] F_V_Din_A;
input  [31:0] F_V_Dout_A;
output   F_V_Clk_A;
output   F_V_Rst_A;
output  [31:0] C_V_Addr_A;
output   C_V_EN_A;
output  [3:0] C_V_WEN_A;
output  [31:0] C_V_Din_A;
input  [31:0] C_V_Dout_A;
output   C_V_Clk_A;
output   C_V_Rst_A;
output  [31:0] D_V_Addr_A;
output   D_V_EN_A;
output  [3:0] D_V_WEN_A;
output  [31:0] D_V_Din_A;
input  [31:0] D_V_Dout_A;
output   D_V_Clk_A;
output   D_V_Rst_A;
output  [31:0] G_V_Addr_A;
output   G_V_EN_A;
output  [3:0] G_V_WEN_A;
output  [31:0] G_V_Din_A;
input  [31:0] G_V_Dout_A;
output   G_V_Clk_A;
output   G_V_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg E_V_EN_A;
reg[3:0] E_V_WEN_A;
reg A_V_EN_A;
reg B_V_EN_A;
reg F_V_EN_A;
reg[3:0] F_V_WEN_A;
reg C_V_EN_A;
reg D_V_EN_A;
reg G_V_EN_A;
reg[3:0] G_V_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] i_fu_312_p2;
reg   [3:0] i_reg_630;
wire    ap_CS_fsm_state2;
wire   [7:0] zext_ln16_fu_326_p1;
reg   [7:0] zext_ln16_reg_635;
wire   [0:0] icmp_ln13_fu_306_p2;
wire   [3:0] j_fu_336_p2;
reg   [3:0] j_reg_644;
wire    ap_CS_fsm_state3;
wire   [7:0] zext_ln321_fu_342_p1;
reg   [7:0] zext_ln321_reg_649;
wire   [0:0] icmp_ln16_fu_330_p2;
reg   [5:0] E_V_addr_reg_654;
wire   [3:0] k_fu_362_p2;
reg   [3:0] k_reg_662;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln21_fu_356_p2;
reg  signed [31:0] A_V_load_reg_677;
wire    ap_CS_fsm_state5;
reg  signed [31:0] B_V_load_reg_682;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] v_V_reg_687;
wire    ap_CS_fsm_state8;
wire   [31:0] add_ln700_fu_408_p2;
wire    ap_CS_fsm_state9;
wire   [3:0] i_1_fu_419_p2;
reg   [3:0] i_1_reg_700;
wire    ap_CS_fsm_state10;
wire   [7:0] zext_ln33_fu_433_p1;
reg   [7:0] zext_ln33_reg_705;
wire   [0:0] icmp_ln30_fu_413_p2;
wire   [3:0] j_1_fu_443_p2;
reg   [3:0] j_1_reg_714;
wire    ap_CS_fsm_state11;
wire   [7:0] zext_ln321_2_fu_449_p1;
reg   [7:0] zext_ln321_2_reg_719;
wire   [0:0] icmp_ln33_fu_437_p2;
reg   [5:0] F_V_addr_reg_724;
wire   [3:0] k_1_fu_469_p2;
reg   [3:0] k_1_reg_732;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln38_fu_463_p2;
reg  signed [31:0] C_V_load_reg_747;
wire    ap_CS_fsm_state13;
reg  signed [31:0] D_V_load_reg_752;
wire   [31:0] grp_fu_511_p2;
reg   [31:0] v_V_1_reg_757;
wire    ap_CS_fsm_state16;
wire   [31:0] add_ln700_1_fu_515_p2;
wire    ap_CS_fsm_state17;
wire   [3:0] i_2_fu_526_p2;
reg   [3:0] i_2_reg_770;
wire    ap_CS_fsm_state18;
wire   [7:0] zext_ln51_fu_540_p1;
reg   [7:0] zext_ln51_reg_775;
wire   [0:0] icmp_ln48_fu_520_p2;
wire   [3:0] j_2_fu_550_p2;
reg   [3:0] j_2_reg_784;
wire    ap_CS_fsm_state19;
wire   [7:0] zext_ln321_4_fu_556_p1;
reg   [7:0] zext_ln321_4_reg_789;
wire   [0:0] icmp_ln51_fu_544_p2;
reg   [5:0] G_V_addr_reg_794;
wire   [3:0] k_2_fu_576_p2;
reg   [3:0] k_2_reg_802;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln56_fu_570_p2;
reg  signed [31:0] E_V_load_1_reg_817;
wire    ap_CS_fsm_state21;
reg  signed [31:0] F_V_load_1_reg_822;
wire   [31:0] grp_fu_618_p2;
reg   [31:0] v_V_2_reg_827;
wire    ap_CS_fsm_state24;
wire   [31:0] add_ln700_2_fu_622_p2;
wire    ap_CS_fsm_state25;
reg   [3:0] i_0_reg_168;
reg   [3:0] j_0_reg_179;
reg   [31:0] E_V_load_reg_190;
reg   [3:0] k_0_reg_203;
reg   [3:0] i1_0_reg_214;
reg   [3:0] j2_0_reg_225;
reg   [31:0] F_V_load_reg_236;
reg   [3:0] k3_0_reg_249;
reg   [3:0] i5_0_reg_260;
reg   [3:0] j6_0_reg_271;
reg   [31:0] G_V_load_reg_282;
reg   [3:0] k7_0_reg_295;
wire   [63:0] zext_ln321_1_fu_351_p1;
wire   [63:0] zext_ln215_1_fu_377_p1;
wire   [63:0] zext_ln215_3_fu_399_p1;
wire   [63:0] zext_ln321_3_fu_458_p1;
wire   [63:0] zext_ln215_5_fu_484_p1;
wire   [63:0] zext_ln215_7_fu_506_p1;
wire   [63:0] zext_ln321_5_fu_565_p1;
wire   [63:0] zext_ln215_9_fu_591_p1;
wire   [63:0] zext_ln215_11_fu_613_p1;
reg   [31:0] E_V_Addr_A_orig;
wire   [31:0] A_V_Addr_A_orig;
wire   [31:0] B_V_Addr_A_orig;
reg   [31:0] F_V_Addr_A_orig;
wire   [31:0] C_V_Addr_A_orig;
wire   [31:0] D_V_Addr_A_orig;
wire   [31:0] G_V_Addr_A_orig;
wire   [6:0] tmp_6_fu_318_p3;
wire   [7:0] add_ln321_fu_346_p2;
wire   [7:0] zext_ln215_fu_368_p1;
wire   [7:0] add_ln215_fu_372_p2;
wire   [6:0] tmp_9_fu_382_p3;
wire   [7:0] zext_ln215_2_fu_390_p1;
wire   [7:0] add_ln215_1_fu_394_p2;
wire    ap_CS_fsm_state6;
wire   [6:0] tmp_7_fu_425_p3;
wire   [7:0] add_ln321_1_fu_453_p2;
wire   [7:0] zext_ln215_4_fu_475_p1;
wire   [7:0] add_ln215_2_fu_479_p2;
wire   [6:0] tmp_s_fu_489_p3;
wire   [7:0] zext_ln215_6_fu_497_p1;
wire   [7:0] add_ln215_3_fu_501_p2;
wire    ap_CS_fsm_state14;
wire   [6:0] tmp_8_fu_532_p3;
wire   [7:0] add_ln321_2_fu_560_p2;
wire   [7:0] zext_ln215_8_fu_582_p1;
wire   [7:0] add_ln215_4_fu_586_p2;
wire   [6:0] tmp_10_fu_596_p3;
wire   [7:0] zext_ln215_10_fu_604_p1;
wire   [7:0] add_ln215_5_fu_608_p2;
wire    ap_CS_fsm_state22;
reg   [24:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
end

kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
kernel_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

kernel_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_mul_32s_32s_32_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_V_load_reg_677),
    .din1(B_V_load_reg_682),
    .ce(1'b1),
    .dout(grp_fu_404_p2)
);

kernel_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_mul_32s_32s_32_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(C_V_load_reg_747),
    .din1(D_V_load_reg_752),
    .ce(1'b1),
    .dout(grp_fu_511_p2)
);

kernel_mul_32s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kernel_mul_32s_32s_32_3_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(E_V_load_1_reg_817),
    .din1(F_V_load_1_reg_822),
    .ce(1'b1),
    .dout(grp_fu_618_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        E_V_load_reg_190 <= add_ln700_fu_408_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_330_p2 == 1'd0))) begin
        E_V_load_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        F_V_load_reg_236 <= add_ln700_1_fu_515_p2;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_437_p2 == 1'd0))) begin
        F_V_load_reg_236 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        G_V_load_reg_282 <= add_ln700_2_fu_622_p2;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln51_fu_544_p2 == 1'd0))) begin
        G_V_load_reg_282 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_306_p2 == 1'd1))) begin
        i1_0_reg_214 <= 4'd0;
    end else if (((icmp_ln33_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i1_0_reg_214 <= i_1_reg_700;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i5_0_reg_260 <= 4'd0;
    end else if (((icmp_ln51_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        i5_0_reg_260 <= i_2_reg_770;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_330_p2 == 1'd1))) begin
        i_0_reg_168 <= i_reg_630;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_168 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        j2_0_reg_225 <= j_1_reg_714;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln30_fu_413_p2 == 1'd0))) begin
        j2_0_reg_225 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln56_fu_570_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        j6_0_reg_271 <= j_2_reg_784;
    end else if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln48_fu_520_p2 == 1'd0))) begin
        j6_0_reg_271 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_356_p2 == 1'd1))) begin
        j_0_reg_179 <= j_reg_644;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_306_p2 == 1'd0))) begin
        j_0_reg_179 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        k3_0_reg_249 <= k_1_reg_732;
    end else if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_437_p2 == 1'd0))) begin
        k3_0_reg_249 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        k7_0_reg_295 <= k_2_reg_802;
    end else if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln51_fu_544_p2 == 1'd0))) begin
        k7_0_reg_295 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_0_reg_203 <= k_reg_662;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_330_p2 == 1'd0))) begin
        k_0_reg_203 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_V_load_reg_677 <= A_V_Dout_A;
        B_V_load_reg_682 <= B_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        C_V_load_reg_747 <= C_V_Dout_A;
        D_V_load_reg_752 <= D_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_330_p2 == 1'd0))) begin
        E_V_addr_reg_654 <= zext_ln321_1_fu_351_p1;
        zext_ln321_reg_649[3 : 0] <= zext_ln321_fu_342_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        E_V_load_1_reg_817 <= E_V_Dout_A;
        F_V_load_1_reg_822 <= F_V_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln33_fu_437_p2 == 1'd0))) begin
        F_V_addr_reg_724 <= zext_ln321_3_fu_458_p1;
        zext_ln321_2_reg_719[3 : 0] <= zext_ln321_2_fu_449_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln51_fu_544_p2 == 1'd0))) begin
        G_V_addr_reg_794 <= zext_ln321_5_fu_565_p1;
        zext_ln321_4_reg_789[3 : 0] <= zext_ln321_4_fu_556_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_700 <= i_1_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_2_reg_770 <= i_2_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_630 <= i_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_714 <= j_1_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_2_reg_784 <= j_2_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_644 <= j_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_1_reg_732 <= k_1_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        k_2_reg_802 <= k_2_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_662 <= k_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        v_V_1_reg_757 <= grp_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        v_V_2_reg_827 <= grp_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        v_V_reg_687 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_306_p2 == 1'd0))) begin
        zext_ln16_reg_635[6 : 3] <= zext_ln16_fu_326_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln30_fu_413_p2 == 1'd0))) begin
        zext_ln33_reg_705[6 : 3] <= zext_ln33_fu_433_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln48_fu_520_p2 == 1'd0))) begin
        zext_ln51_reg_775[6 : 3] <= zext_ln51_fu_540_p1[6 : 3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_V_EN_A = 1'b1;
    end else begin
        A_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_V_EN_A = 1'b1;
    end else begin
        B_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_V_EN_A = 1'b1;
    end else begin
        C_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        D_V_EN_A = 1'b1;
    end else begin
        D_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        E_V_Addr_A_orig = zext_ln215_9_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        E_V_Addr_A_orig = E_V_addr_reg_654;
    end else begin
        E_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state4))) begin
        E_V_EN_A = 1'b1;
    end else begin
        E_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        E_V_WEN_A = 4'd15;
    end else begin
        E_V_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        F_V_Addr_A_orig = zext_ln215_11_fu_613_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        F_V_Addr_A_orig = F_V_addr_reg_724;
    end else begin
        F_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
        F_V_EN_A = 1'b1;
    end else begin
        F_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        F_V_WEN_A = 4'd15;
    end else begin
        F_V_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        G_V_EN_A = 1'b1;
    end else begin
        G_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        G_V_WEN_A = 4'd15;
    end else begin
        G_V_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln13_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_356_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln30_fu_413_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln33_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln38_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln48_fu_520_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln51_fu_544_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln56_fu_570_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_V_Addr_A = A_V_Addr_A_orig << 32'd2;

assign A_V_Addr_A_orig = zext_ln215_1_fu_377_p1;

assign A_V_Clk_A = ap_clk;

assign A_V_Din_A = 32'd0;

assign A_V_Rst_A = ap_rst_n_inv;

assign A_V_WEN_A = 4'd0;

assign B_V_Addr_A = B_V_Addr_A_orig << 32'd2;

assign B_V_Addr_A_orig = zext_ln215_3_fu_399_p1;

assign B_V_Clk_A = ap_clk;

assign B_V_Din_A = 32'd0;

assign B_V_Rst_A = ap_rst_n_inv;

assign B_V_WEN_A = 4'd0;

assign C_V_Addr_A = C_V_Addr_A_orig << 32'd2;

assign C_V_Addr_A_orig = zext_ln215_5_fu_484_p1;

assign C_V_Clk_A = ap_clk;

assign C_V_Din_A = 32'd0;

assign C_V_Rst_A = ap_rst_n_inv;

assign C_V_WEN_A = 4'd0;

assign D_V_Addr_A = D_V_Addr_A_orig << 32'd2;

assign D_V_Addr_A_orig = zext_ln215_7_fu_506_p1;

assign D_V_Clk_A = ap_clk;

assign D_V_Din_A = 32'd0;

assign D_V_Rst_A = ap_rst_n_inv;

assign D_V_WEN_A = 4'd0;

assign E_V_Addr_A = E_V_Addr_A_orig << 32'd2;

assign E_V_Clk_A = ap_clk;

assign E_V_Din_A = E_V_load_reg_190;

assign E_V_Rst_A = ap_rst_n_inv;

assign F_V_Addr_A = F_V_Addr_A_orig << 32'd2;

assign F_V_Clk_A = ap_clk;

assign F_V_Din_A = F_V_load_reg_236;

assign F_V_Rst_A = ap_rst_n_inv;

assign G_V_Addr_A = G_V_Addr_A_orig << 32'd2;

assign G_V_Addr_A_orig = G_V_addr_reg_794;

assign G_V_Clk_A = ap_clk;

assign G_V_Din_A = G_V_load_reg_282;

assign G_V_Rst_A = ap_rst_n_inv;

assign add_ln215_1_fu_394_p2 = (zext_ln321_reg_649 + zext_ln215_2_fu_390_p1);

assign add_ln215_2_fu_479_p2 = (zext_ln215_4_fu_475_p1 + zext_ln33_reg_705);

assign add_ln215_3_fu_501_p2 = (zext_ln321_2_reg_719 + zext_ln215_6_fu_497_p1);

assign add_ln215_4_fu_586_p2 = (zext_ln215_8_fu_582_p1 + zext_ln51_reg_775);

assign add_ln215_5_fu_608_p2 = (zext_ln321_4_reg_789 + zext_ln215_10_fu_604_p1);

assign add_ln215_fu_372_p2 = (zext_ln215_fu_368_p1 + zext_ln16_reg_635);

assign add_ln321_1_fu_453_p2 = (zext_ln33_reg_705 + zext_ln321_2_fu_449_p1);

assign add_ln321_2_fu_560_p2 = (zext_ln51_reg_775 + zext_ln321_4_fu_556_p1);

assign add_ln321_fu_346_p2 = (zext_ln16_reg_635 + zext_ln321_fu_342_p1);

assign add_ln700_1_fu_515_p2 = (F_V_load_reg_236 + v_V_1_reg_757);

assign add_ln700_2_fu_622_p2 = (G_V_load_reg_282 + v_V_2_reg_827);

assign add_ln700_fu_408_p2 = (E_V_load_reg_190 + v_V_reg_687);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_419_p2 = (i1_0_reg_214 + 4'd1);

assign i_2_fu_526_p2 = (i5_0_reg_260 + 4'd1);

assign i_fu_312_p2 = (i_0_reg_168 + 4'd1);

assign icmp_ln13_fu_306_p2 = ((i_0_reg_168 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_330_p2 = ((j_0_reg_179 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_356_p2 = ((k_0_reg_203 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_413_p2 = ((i1_0_reg_214 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_437_p2 = ((j2_0_reg_225 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_463_p2 = ((k3_0_reg_249 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_520_p2 = ((i5_0_reg_260 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_544_p2 = ((j6_0_reg_271 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_570_p2 = ((k7_0_reg_295 == 4'd8) ? 1'b1 : 1'b0);

assign j_1_fu_443_p2 = (j2_0_reg_225 + 4'd1);

assign j_2_fu_550_p2 = (j6_0_reg_271 + 4'd1);

assign j_fu_336_p2 = (j_0_reg_179 + 4'd1);

assign k_1_fu_469_p2 = (k3_0_reg_249 + 4'd1);

assign k_2_fu_576_p2 = (k7_0_reg_295 + 4'd1);

assign k_fu_362_p2 = (k_0_reg_203 + 4'd1);

assign tmp_10_fu_596_p3 = {{k7_0_reg_295}, {3'd0}};

assign tmp_6_fu_318_p3 = {{i_0_reg_168}, {3'd0}};

assign tmp_7_fu_425_p3 = {{i1_0_reg_214}, {3'd0}};

assign tmp_8_fu_532_p3 = {{i5_0_reg_260}, {3'd0}};

assign tmp_9_fu_382_p3 = {{k_0_reg_203}, {3'd0}};

assign tmp_s_fu_489_p3 = {{k3_0_reg_249}, {3'd0}};

assign zext_ln16_fu_326_p1 = tmp_6_fu_318_p3;

assign zext_ln215_10_fu_604_p1 = tmp_10_fu_596_p3;

assign zext_ln215_11_fu_613_p1 = add_ln215_5_fu_608_p2;

assign zext_ln215_1_fu_377_p1 = add_ln215_fu_372_p2;

assign zext_ln215_2_fu_390_p1 = tmp_9_fu_382_p3;

assign zext_ln215_3_fu_399_p1 = add_ln215_1_fu_394_p2;

assign zext_ln215_4_fu_475_p1 = k3_0_reg_249;

assign zext_ln215_5_fu_484_p1 = add_ln215_2_fu_479_p2;

assign zext_ln215_6_fu_497_p1 = tmp_s_fu_489_p3;

assign zext_ln215_7_fu_506_p1 = add_ln215_3_fu_501_p2;

assign zext_ln215_8_fu_582_p1 = k7_0_reg_295;

assign zext_ln215_9_fu_591_p1 = add_ln215_4_fu_586_p2;

assign zext_ln215_fu_368_p1 = k_0_reg_203;

assign zext_ln321_1_fu_351_p1 = add_ln321_fu_346_p2;

assign zext_ln321_2_fu_449_p1 = j2_0_reg_225;

assign zext_ln321_3_fu_458_p1 = add_ln321_1_fu_453_p2;

assign zext_ln321_4_fu_556_p1 = j6_0_reg_271;

assign zext_ln321_5_fu_565_p1 = add_ln321_2_fu_560_p2;

assign zext_ln321_fu_342_p1 = j_0_reg_179;

assign zext_ln33_fu_433_p1 = tmp_7_fu_425_p3;

assign zext_ln51_fu_540_p1 = tmp_8_fu_532_p3;

always @ (posedge ap_clk) begin
    zext_ln16_reg_635[2:0] <= 3'b000;
    zext_ln16_reg_635[7] <= 1'b0;
    zext_ln321_reg_649[7:4] <= 4'b0000;
    zext_ln33_reg_705[2:0] <= 3'b000;
    zext_ln33_reg_705[7] <= 1'b0;
    zext_ln321_2_reg_719[7:4] <= 4'b0000;
    zext_ln51_reg_775[2:0] <= 3'b000;
    zext_ln51_reg_775[7] <= 1'b0;
    zext_ln321_4_reg_789[7:4] <= 4'b0000;
end

endmodule //kernel

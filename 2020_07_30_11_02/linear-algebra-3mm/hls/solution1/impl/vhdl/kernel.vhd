-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    E_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    E_V_EN_A : OUT STD_LOGIC;
    E_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    E_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    E_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    E_V_Clk_A : OUT STD_LOGIC;
    E_V_Rst_A : OUT STD_LOGIC;
    A_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_V_EN_A : OUT STD_LOGIC;
    A_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    A_V_Clk_A : OUT STD_LOGIC;
    A_V_Rst_A : OUT STD_LOGIC;
    B_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_V_EN_A : OUT STD_LOGIC;
    B_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    B_V_Clk_A : OUT STD_LOGIC;
    B_V_Rst_A : OUT STD_LOGIC;
    F_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    F_V_EN_A : OUT STD_LOGIC;
    F_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    F_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    F_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    F_V_Clk_A : OUT STD_LOGIC;
    F_V_Rst_A : OUT STD_LOGIC;
    C_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_V_EN_A : OUT STD_LOGIC;
    C_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    C_V_Clk_A : OUT STD_LOGIC;
    C_V_Rst_A : OUT STD_LOGIC;
    D_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_V_EN_A : OUT STD_LOGIC;
    D_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    D_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    D_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    D_V_Clk_A : OUT STD_LOGIC;
    D_V_Rst_A : OUT STD_LOGIC;
    G_V_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_V_EN_A : OUT STD_LOGIC;
    G_V_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    G_V_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    G_V_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    G_V_Clk_A : OUT STD_LOGIC;
    G_V_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.745000,HLS_SYN_LAT=9651,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=9,HLS_SYN_FF=1057,HLS_SYN_LUT=941,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal i_fu_312_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_630 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln16_fu_326_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln16_reg_635 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_644 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln321_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln16_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal E_V_addr_reg_654 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_fu_362_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_662 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln21_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_V_load_reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal B_V_load_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln700_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_fu_419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_700 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln33_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln33_reg_705 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln30_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_443_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_714 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln321_2_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_2_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln33_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal F_V_addr_reg_724 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_1_fu_469_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln38_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_V_load_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal D_V_load_reg_752 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_1_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln700_1_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_2_fu_526_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_770 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal zext_ln51_fu_540_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_reg_775 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln48_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_550_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_784 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal zext_ln321_4_fu_556_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_4_reg_789 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln51_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal G_V_addr_reg_794 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_fu_576_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_2_reg_802 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln56_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal E_V_load_1_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal F_V_load_1_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_V_2_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal add_ln700_2_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_0_reg_168 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_179 : STD_LOGIC_VECTOR (3 downto 0);
    signal E_V_load_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_203 : STD_LOGIC_VECTOR (3 downto 0);
    signal i1_0_reg_214 : STD_LOGIC_VECTOR (3 downto 0);
    signal j2_0_reg_225 : STD_LOGIC_VECTOR (3 downto 0);
    signal F_V_load_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal k3_0_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal i5_0_reg_260 : STD_LOGIC_VECTOR (3 downto 0);
    signal j6_0_reg_271 : STD_LOGIC_VECTOR (3 downto 0);
    signal G_V_load_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal k7_0_reg_295 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln321_1_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_1_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_3_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_3_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_5_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_9_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_11_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal E_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal A_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal B_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal F_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal C_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal D_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal G_V_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_318_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln321_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_fu_368_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_382_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_2_fu_390_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_1_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_7_fu_425_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln321_1_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_4_fu_475_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_2_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_489_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_6_fu_497_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_3_fu_501_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_8_fu_532_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln321_2_fu_560_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_8_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_4_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_596_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln215_10_fu_604_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln215_5_fu_608_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);

    component kernel_mul_32s_32s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    kernel_control_s_axi_U : component kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    kernel_mul_32s_32s_32_3_1_U1 : component kernel_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => A_V_load_reg_677,
        din1 => B_V_load_reg_682,
        ce => ap_const_logic_1,
        dout => grp_fu_404_p2);

    kernel_mul_32s_32s_32_3_1_U2 : component kernel_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => C_V_load_reg_747,
        din1 => D_V_load_reg_752,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p2);

    kernel_mul_32s_32s_32_3_1_U3 : component kernel_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => E_V_load_1_reg_817,
        din1 => F_V_load_1_reg_822,
        ce => ap_const_logic_1,
        dout => grp_fu_618_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    E_V_load_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                E_V_load_reg_190 <= add_ln700_fu_408_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_330_p2 = ap_const_lv1_0))) then 
                E_V_load_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    F_V_load_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                F_V_load_reg_236 <= add_ln700_1_fu_515_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln33_fu_437_p2 = ap_const_lv1_0))) then 
                F_V_load_reg_236 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    G_V_load_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                G_V_load_reg_282 <= add_ln700_2_fu_622_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln51_fu_544_p2 = ap_const_lv1_0))) then 
                G_V_load_reg_282 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i1_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_306_p2 = ap_const_lv1_1))) then 
                i1_0_reg_214 <= ap_const_lv4_0;
            elsif (((icmp_ln33_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i1_0_reg_214 <= i_1_reg_700;
            end if; 
        end if;
    end process;

    i5_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i5_0_reg_260 <= ap_const_lv4_0;
            elsif (((icmp_ln51_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i5_0_reg_260 <= i_2_reg_770;
            end if; 
        end if;
    end process;

    i_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_330_p2 = ap_const_lv1_1))) then 
                i_0_reg_168 <= i_reg_630;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_168 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j2_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j2_0_reg_225 <= j_1_reg_714;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln30_fu_413_p2 = ap_const_lv1_0))) then 
                j2_0_reg_225 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j6_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                j6_0_reg_271 <= j_2_reg_784;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln48_fu_520_p2 = ap_const_lv1_0))) then 
                j6_0_reg_271 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_356_p2 = ap_const_lv1_1))) then 
                j_0_reg_179 <= j_reg_644;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_306_p2 = ap_const_lv1_0))) then 
                j_0_reg_179 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k3_0_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k3_0_reg_249 <= k_1_reg_732;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln33_fu_437_p2 = ap_const_lv1_0))) then 
                k3_0_reg_249 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k7_0_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                k7_0_reg_295 <= k_2_reg_802;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln51_fu_544_p2 = ap_const_lv1_0))) then 
                k7_0_reg_295 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_0_reg_203 <= k_reg_662;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_330_p2 = ap_const_lv1_0))) then 
                k_0_reg_203 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                A_V_load_reg_677 <= A_V_Dout_A;
                B_V_load_reg_682 <= B_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                C_V_load_reg_747 <= C_V_Dout_A;
                D_V_load_reg_752 <= D_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_330_p2 = ap_const_lv1_0))) then
                E_V_addr_reg_654 <= zext_ln321_1_fu_351_p1(6 - 1 downto 0);
                    zext_ln321_reg_649(3 downto 0) <= zext_ln321_fu_342_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                E_V_load_1_reg_817 <= E_V_Dout_A;
                F_V_load_1_reg_822 <= F_V_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln33_fu_437_p2 = ap_const_lv1_0))) then
                F_V_addr_reg_724 <= zext_ln321_3_fu_458_p1(6 - 1 downto 0);
                    zext_ln321_2_reg_719(3 downto 0) <= zext_ln321_2_fu_449_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln51_fu_544_p2 = ap_const_lv1_0))) then
                G_V_addr_reg_794 <= zext_ln321_5_fu_565_p1(6 - 1 downto 0);
                    zext_ln321_4_reg_789(3 downto 0) <= zext_ln321_4_fu_556_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_1_reg_700 <= i_1_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                i_2_reg_770 <= i_2_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_630 <= i_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_1_reg_714 <= j_1_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                j_2_reg_784 <= j_2_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_644 <= j_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                k_1_reg_732 <= k_1_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                k_2_reg_802 <= k_2_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                k_reg_662 <= k_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                v_V_1_reg_757 <= grp_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                v_V_2_reg_827 <= grp_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                v_V_reg_687 <= grp_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_306_p2 = ap_const_lv1_0))) then
                    zext_ln16_reg_635(6 downto 3) <= zext_ln16_fu_326_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln30_fu_413_p2 = ap_const_lv1_0))) then
                    zext_ln33_reg_705(6 downto 3) <= zext_ln33_fu_433_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln48_fu_520_p2 = ap_const_lv1_0))) then
                    zext_ln51_reg_775(6 downto 3) <= zext_ln51_fu_540_p1(6 downto 3);
            end if;
        end if;
    end process;
    zext_ln16_reg_635(2 downto 0) <= "000";
    zext_ln16_reg_635(7) <= '0';
    zext_ln321_reg_649(7 downto 4) <= "0000";
    zext_ln33_reg_705(2 downto 0) <= "000";
    zext_ln33_reg_705(7) <= '0';
    zext_ln321_2_reg_719(7 downto 4) <= "0000";
    zext_ln51_reg_775(2 downto 0) <= "000";
    zext_ln51_reg_775(7) <= '0';
    zext_ln321_4_reg_789(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_306_p2, ap_CS_fsm_state3, icmp_ln16_fu_330_p2, ap_CS_fsm_state4, icmp_ln21_fu_356_p2, ap_CS_fsm_state10, icmp_ln30_fu_413_p2, ap_CS_fsm_state11, icmp_ln33_fu_437_p2, ap_CS_fsm_state12, icmp_ln38_fu_463_p2, ap_CS_fsm_state18, icmp_ln48_fu_520_p2, ap_CS_fsm_state19, icmp_ln51_fu_544_p2, ap_CS_fsm_state20, icmp_ln56_fu_570_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_356_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln30_fu_413_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln33_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln38_fu_463_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln48_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln51_fu_544_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln56_fu_570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_V_Addr_A <= std_logic_vector(shift_left(unsigned(A_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    A_V_Addr_A_orig <= zext_ln215_1_fu_377_p1(32 - 1 downto 0);
    A_V_Clk_A <= ap_clk;
    A_V_Din_A <= ap_const_lv32_0;

    A_V_EN_A_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_V_EN_A <= ap_const_logic_1;
        else 
            A_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    A_V_Rst_A <= ap_rst_n_inv;
    A_V_WEN_A <= ap_const_lv4_0;
    B_V_Addr_A <= std_logic_vector(shift_left(unsigned(B_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    B_V_Addr_A_orig <= zext_ln215_3_fu_399_p1(32 - 1 downto 0);
    B_V_Clk_A <= ap_clk;
    B_V_Din_A <= ap_const_lv32_0;

    B_V_EN_A_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_V_EN_A <= ap_const_logic_1;
        else 
            B_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    B_V_Rst_A <= ap_rst_n_inv;
    B_V_WEN_A <= ap_const_lv4_0;
    C_V_Addr_A <= std_logic_vector(shift_left(unsigned(C_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    C_V_Addr_A_orig <= zext_ln215_5_fu_484_p1(32 - 1 downto 0);
    C_V_Clk_A <= ap_clk;
    C_V_Din_A <= ap_const_lv32_0;

    C_V_EN_A_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_V_EN_A <= ap_const_logic_1;
        else 
            C_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    C_V_Rst_A <= ap_rst_n_inv;
    C_V_WEN_A <= ap_const_lv4_0;
    D_V_Addr_A <= std_logic_vector(shift_left(unsigned(D_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    D_V_Addr_A_orig <= zext_ln215_7_fu_506_p1(32 - 1 downto 0);
    D_V_Clk_A <= ap_clk;
    D_V_Din_A <= ap_const_lv32_0;

    D_V_EN_A_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            D_V_EN_A <= ap_const_logic_1;
        else 
            D_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    D_V_Rst_A <= ap_rst_n_inv;
    D_V_WEN_A <= ap_const_lv4_0;
    E_V_Addr_A <= std_logic_vector(shift_left(unsigned(E_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    E_V_Addr_A_orig_assign_proc : process(E_V_addr_reg_654, ap_CS_fsm_state4, ap_CS_fsm_state20, zext_ln215_9_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            E_V_Addr_A_orig <= zext_ln215_9_fu_591_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            E_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(E_V_addr_reg_654),32));
        else 
            E_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    E_V_Clk_A <= ap_clk;
    E_V_Din_A <= E_V_load_reg_190;

    E_V_EN_A_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            E_V_EN_A <= ap_const_logic_1;
        else 
            E_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    E_V_Rst_A <= ap_rst_n_inv;

    E_V_WEN_A_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            E_V_WEN_A <= ap_const_lv4_F;
        else 
            E_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    F_V_Addr_A <= std_logic_vector(shift_left(unsigned(F_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    F_V_Addr_A_orig_assign_proc : process(F_V_addr_reg_724, ap_CS_fsm_state12, ap_CS_fsm_state20, zext_ln215_11_fu_613_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            F_V_Addr_A_orig <= zext_ln215_11_fu_613_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            F_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(F_V_addr_reg_724),32));
        else 
            F_V_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    F_V_Clk_A <= ap_clk;
    F_V_Din_A <= F_V_load_reg_236;

    F_V_EN_A_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            F_V_EN_A <= ap_const_logic_1;
        else 
            F_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    F_V_Rst_A <= ap_rst_n_inv;

    F_V_WEN_A_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            F_V_WEN_A <= ap_const_lv4_F;
        else 
            F_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    G_V_Addr_A <= std_logic_vector(shift_left(unsigned(G_V_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    G_V_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(G_V_addr_reg_794),32));
    G_V_Clk_A <= ap_clk;
    G_V_Din_A <= G_V_load_reg_282;

    G_V_EN_A_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            G_V_EN_A <= ap_const_logic_1;
        else 
            G_V_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    G_V_Rst_A <= ap_rst_n_inv;

    G_V_WEN_A_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            G_V_WEN_A <= ap_const_lv4_F;
        else 
            G_V_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    add_ln215_1_fu_394_p2 <= std_logic_vector(unsigned(zext_ln321_reg_649) + unsigned(zext_ln215_2_fu_390_p1));
    add_ln215_2_fu_479_p2 <= std_logic_vector(unsigned(zext_ln215_4_fu_475_p1) + unsigned(zext_ln33_reg_705));
    add_ln215_3_fu_501_p2 <= std_logic_vector(unsigned(zext_ln321_2_reg_719) + unsigned(zext_ln215_6_fu_497_p1));
    add_ln215_4_fu_586_p2 <= std_logic_vector(unsigned(zext_ln215_8_fu_582_p1) + unsigned(zext_ln51_reg_775));
    add_ln215_5_fu_608_p2 <= std_logic_vector(unsigned(zext_ln321_4_reg_789) + unsigned(zext_ln215_10_fu_604_p1));
    add_ln215_fu_372_p2 <= std_logic_vector(unsigned(zext_ln215_fu_368_p1) + unsigned(zext_ln16_reg_635));
    add_ln321_1_fu_453_p2 <= std_logic_vector(unsigned(zext_ln33_reg_705) + unsigned(zext_ln321_2_fu_449_p1));
    add_ln321_2_fu_560_p2 <= std_logic_vector(unsigned(zext_ln51_reg_775) + unsigned(zext_ln321_4_fu_556_p1));
    add_ln321_fu_346_p2 <= std_logic_vector(unsigned(zext_ln16_reg_635) + unsigned(zext_ln321_fu_342_p1));
    add_ln700_1_fu_515_p2 <= std_logic_vector(unsigned(F_V_load_reg_236) + unsigned(v_V_1_reg_757));
    add_ln700_2_fu_622_p2 <= std_logic_vector(unsigned(G_V_load_reg_282) + unsigned(v_V_2_reg_827));
    add_ln700_fu_408_p2 <= std_logic_vector(unsigned(E_V_load_reg_190) + unsigned(v_V_reg_687));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state18, icmp_ln48_fu_520_p2)
    begin
        if (((icmp_ln48_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18, icmp_ln48_fu_520_p2)
    begin
        if (((icmp_ln48_fu_520_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_1_fu_419_p2 <= std_logic_vector(unsigned(i1_0_reg_214) + unsigned(ap_const_lv4_1));
    i_2_fu_526_p2 <= std_logic_vector(unsigned(i5_0_reg_260) + unsigned(ap_const_lv4_1));
    i_fu_312_p2 <= std_logic_vector(unsigned(i_0_reg_168) + unsigned(ap_const_lv4_1));
    icmp_ln13_fu_306_p2 <= "1" when (i_0_reg_168 = ap_const_lv4_8) else "0";
    icmp_ln16_fu_330_p2 <= "1" when (j_0_reg_179 = ap_const_lv4_8) else "0";
    icmp_ln21_fu_356_p2 <= "1" when (k_0_reg_203 = ap_const_lv4_8) else "0";
    icmp_ln30_fu_413_p2 <= "1" when (i1_0_reg_214 = ap_const_lv4_8) else "0";
    icmp_ln33_fu_437_p2 <= "1" when (j2_0_reg_225 = ap_const_lv4_8) else "0";
    icmp_ln38_fu_463_p2 <= "1" when (k3_0_reg_249 = ap_const_lv4_8) else "0";
    icmp_ln48_fu_520_p2 <= "1" when (i5_0_reg_260 = ap_const_lv4_8) else "0";
    icmp_ln51_fu_544_p2 <= "1" when (j6_0_reg_271 = ap_const_lv4_8) else "0";
    icmp_ln56_fu_570_p2 <= "1" when (k7_0_reg_295 = ap_const_lv4_8) else "0";
    j_1_fu_443_p2 <= std_logic_vector(unsigned(j2_0_reg_225) + unsigned(ap_const_lv4_1));
    j_2_fu_550_p2 <= std_logic_vector(unsigned(j6_0_reg_271) + unsigned(ap_const_lv4_1));
    j_fu_336_p2 <= std_logic_vector(unsigned(j_0_reg_179) + unsigned(ap_const_lv4_1));
    k_1_fu_469_p2 <= std_logic_vector(unsigned(k3_0_reg_249) + unsigned(ap_const_lv4_1));
    k_2_fu_576_p2 <= std_logic_vector(unsigned(k7_0_reg_295) + unsigned(ap_const_lv4_1));
    k_fu_362_p2 <= std_logic_vector(unsigned(k_0_reg_203) + unsigned(ap_const_lv4_1));
    tmp_10_fu_596_p3 <= (k7_0_reg_295 & ap_const_lv3_0);
    tmp_6_fu_318_p3 <= (i_0_reg_168 & ap_const_lv3_0);
    tmp_7_fu_425_p3 <= (i1_0_reg_214 & ap_const_lv3_0);
    tmp_8_fu_532_p3 <= (i5_0_reg_260 & ap_const_lv3_0);
    tmp_9_fu_382_p3 <= (k_0_reg_203 & ap_const_lv3_0);
    tmp_s_fu_489_p3 <= (k3_0_reg_249 & ap_const_lv3_0);
    zext_ln16_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_318_p3),8));
    zext_ln215_10_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_596_p3),8));
    zext_ln215_11_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_5_fu_608_p2),64));
    zext_ln215_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_372_p2),64));
    zext_ln215_2_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_382_p3),8));
    zext_ln215_3_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_394_p2),64));
    zext_ln215_4_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k3_0_reg_249),8));
    zext_ln215_5_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_2_fu_479_p2),64));
    zext_ln215_6_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_489_p3),8));
    zext_ln215_7_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_3_fu_501_p2),64));
    zext_ln215_8_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k7_0_reg_295),8));
    zext_ln215_9_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_4_fu_586_p2),64));
    zext_ln215_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_203),8));
    zext_ln321_1_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_346_p2),64));
    zext_ln321_2_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j2_0_reg_225),8));
    zext_ln321_3_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_1_fu_453_p2),64));
    zext_ln321_4_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j6_0_reg_271),8));
    zext_ln321_5_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_2_fu_560_p2),64));
    zext_ln321_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_179),8));
    zext_ln33_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_425_p3),8));
    zext_ln51_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_532_p3),8));
end behav;

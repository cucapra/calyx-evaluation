
decl A_int: ubit<32>[M][N];
decl x_int: ubit<32>[N];
decl y_int: ubit<32>[N];
decl tmp_int: ubit<32>[M];

let A: ubit<32>[M][N];
let x: ubit<32>[N];
let y: ubit<32>[N];

view y_sh = y[_: bank 1];
view x_sh = x[_: bank 1];
view A_sh = A[_: bank 1][_: bank 1];

for (let i0: M_bw = 0..M) {
  y_sh[i0] := 0;
  x_sh[i0] := x_int[i0];
  for (let j0: N_bw = 0..N) {
    A_sh[i0][j0] := A_int[i0][j0];
  }
}

---

for (let i: M_bw = 0..M) {
  tmp_int[i] := 0;
  ---
  for (let j: N_bw = 0..N) {
    let t: ubit<32> = A[i][j] * x[j];
  } combine {
    tmp_int[i] += t;
  }
  ---
  for (let j: N_bw = 0..N) {
    let y0: ubit<32> = y[j];
    ---
    y[j] := y0 + A[i][j] * tmp_int[i];
  }
}

---

for (let i1: M_bw = 0..M) {
  y_int[i1] := y_sh[i1];
  x_int[i1] := x_sh[i1];
  for (let j1: N_bw = 0..N) {
    A_int[i1][j1] := A_sh[i1][j1];
  }
}

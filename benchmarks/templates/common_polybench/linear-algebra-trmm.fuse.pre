
decl alpha_int: ubit<32>[1];
decl A_int: ubit<32>[M][M];
decl B_int: ubit<32>[M][N];

for (let i: M_bw = 0..M) {
  for (let j: N_bw = 0..N) {
    let k: M_bw = i + (1 as M_bw);
    // XXX: Try rewriting this as a 'for' loop
    while (k < M) {
      decor "#pragma HLS loop_tripcount WHILE0"
      let B_i_j: ubit<32> = B_int[i][j];
      ---
      let B_k_j: ubit<32> = B_int[k][j];
      ---

      // XXX: This is reduction pattern
      B_int[i][j] := A_int[k][i] * B_k_j + B_i_j;
      // Update loop counter
      k := k + (1 as ubit<4>);
    }
    ---
    // XXX: This is reduction pattern
    let B_i_j: ubit<32> = B_int[i][j];
    ---
    B_int[i][j] := alpha_int[0] * B_i_j;
  }
}

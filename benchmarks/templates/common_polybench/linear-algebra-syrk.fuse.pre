
decl alpha_int: ubit<32>[1];
decl beta_int: ubit<32>[1];
decl C: ubit<32>[N][N];
decl A_int: ubit<32>[N][M];

let A: ubit<32>[N][M];
view A_sh = A[_: bank 1][_: bank 1];

for (let i0: N_bw = 0..N) {
  for (let j0: M_bw = 0..M) {
    A_sh[i0][j0] := A_int[i0][j0];
  }
}

---

for (let i: N_bw = 0..N) {
  let j: N_bw = 0;

  // Originally a for loop
  while (j <= i) {
    decor "#pragma HLS loop_tripcount WHILE0"
    let C_i_j: ubit<32> = C[i][j];
    ---
    C[i][j] := C_i_j * beta_int[0];
    // Update loop counter
    j := j + (1 as N_bw);
  }
  ---
  let j2: N_bw = 0;
  while (j2 <= i) {
    decor "#pragma HLS loop_tripcount WHILE1"
    for (let k: M_bw = 0..M) {
      let A_i_k: ubit<32> = A[i][k];
      ---
      let t = alpha_int[0] * A_i_k * A[j2][k];
    } combine {
      C[i][j2] += t;
    }
    // Update loop counter
    j2 := j2 + (1 as N_bw);
  }
}

---

for (let i0: N_bw = 0..N) {
  for (let j0: M_bw = 0..M) {
    A_int[i0][j0] := A_sh[i0][j0];
  }
}


decl alpha_int: ubit<32>[1];
decl beta_int: ubit<32>[1];
decl tmp_int: ubit<32>[NI][NJ];
decl A_int:   ubit<32>[NI][NK];
decl B_int:   ubit<32>[NK][NJ];
decl C_int:   ubit<32>[NJ][NL];
decl D_int:   ubit<32>[NI][NL];

let tmp: ubit<32>[NI][NJ];
let A:   ubit<32>[NI][NK];
let B:   ubit<32>[NK][NJ];
let C:   ubit<32>[NJ][NL];
let D:   ubit<32>[NI][NL];

view A_sh = A[_: bank 1][_: bank 1];
view B_sh = B[_: bank 1][_: bank 1];
view C_sh = C[_: bank 1][_: bank 1];
view D_sh = D[_: bank 1][_: bank 1];
view tmp_sh = tmp[_: bank 1][_: bank 1];

for (let i0: NI_bw = 0..NI) {
  for (let j0: NJ_bw = 0..NJ) {
      A_sh[i0][j0] :=   A_int[i0][j0];
      B_sh[i0][j0] :=   B_int[i0][j0];
      C_sh[i0][j0] :=   C_int[i0][j0];
      D_sh[i0][j0] :=   D_int[i0][j0];
    tmp_sh[i0][j0] := tmp_int[i0][j0];
  }
}

---

for (let i: NI_bw = 0..NI) {
  for (let j: NJ_bw = 0..NJ) {
    tmp[i][j] := 0;
    ---
    for (let k: NK_bw = 0..NK) {
      let v: ubit<32> = alpha_int[0] * A[i][k] * B[k][j]
    } combine {
      tmp[i][j] += v;
    }
  }
}

---

for (let i1: NI_bw = 0..NI) {
  for (let j1: NL_bw = 0..NL) {
    let d_tmp: ubit<32> = D[i1][j1];
    ---
    D[i1][j1] := beta_int[0] * d_tmp;
    ---
    for (let k1: NJ_bw = 0..NJ) {
      let v1: ubit<32> = tmp[i1][k1] * C[k1][j1]
    } combine {
      D[i1][j1] += v1;
    }
  }
}

---

for (let i0: NI_bw = 0..NI) {
  for (let j0: NJ_bw = 0..NJ) {
      A_int[i0][j0] :=   A_sh[i0][j0];
      B_int[i0][j0] :=   B_sh[i0][j0];
      C_int[i0][j0] :=   C_sh[i0][j0];
      D_int[i0][j0] :=   D_sh[i0][j0];
    tmp_int[i0][j0] := tmp_sh[i0][j0];
  }
}
